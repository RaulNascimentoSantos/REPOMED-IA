Você é um desenvolvedor full-stack senior especializado em React, Node.js e sistemas médicos. Vou fornecer a estrutura base de um sistema médico (RepoMed IA) que precisa ser completamente modernizado seguindo os padrões de UX/UI de 2025 dos aplicativos médicos líderes de mercado.
OBJETIVO PRINCIPAL
Refatorar completamente o frontend do RepoMed IA implementando um design system moderno inspirado nos líderes de mercado (Doximity, Epic MyChart, Cerner, AthenaHealth) com foco em UX médico de alta performance, mantendo o backend Fastify já existente mas adicionando novas funcionalidades de IA.

PARTE 1: FRONTEND COMPLETO - DESIGN SYSTEM MODERNO
1.1 ESTRUTURA DE COMPONENTES UI
typescript// CRIAR ARQUIVO: repomed-web/src/design-system/index.ts

// Design tokens inspirados em aplicativos médicos modernos
export const tokens = {
  colors: {
    // Paleta médica profissional (OKLCH para consistência)
    primary: {
      50: 'oklch(97% 0.02 240)',  // Azul médico suave
      100: 'oklch(94% 0.04 240)',
      200: 'oklch(88% 0.08 240)',
      300: 'oklch(79% 0.14 240)',
      400: 'oklch(67% 0.20 240)',
      500: 'oklch(55% 0.22 240)',  // Primary main
      600: 'oklch(47% 0.20 240)',
      700: 'oklch(40% 0.18 240)',
      800: 'oklch(33% 0.15 240)',
      900: 'oklch(27% 0.12 240)',
    },
    semantic: {
      success: 'oklch(67% 0.20 145)',  // Verde médico
      warning: 'oklch(75% 0.15 60)',   // Amarelo alerta
      error: 'oklch(60% 0.25 25)',     // Vermelho vital
      info: 'oklch(65% 0.15 220)',     // Azul informação
    },
    clinical: {
      urgent: 'oklch(55% 0.28 15)',    // Vermelho urgência
      routine: 'oklch(70% 0.18 145)',  // Verde rotina
      priority: 'oklch(65% 0.22 45)',  // Laranja prioridade
    },
    neutral: {
      0: 'oklch(100% 0 0)',    // Branco puro
      50: 'oklch(98% 0 0)',
      100: 'oklch(96% 0 0)',
      200: 'oklch(91% 0 0)',
      300: 'oklch(84% 0 0)',
      400: 'oklch(64% 0 0)',
      500: 'oklch(50% 0 0)',
      600: 'oklch(37% 0 0)',
      700: 'oklch(27% 0 0)',
      800: 'oklch(18% 0 0)',
      900: 'oklch(10% 0 0)',
      1000: 'oklch(0% 0 0)',   // Preto puro
    }
  },
  
  typography: {
    fontFamily: {
      sans: 'Inter var, SF Pro Display, -apple-system, BlinkMacSystemFont, sans-serif',
      mono: 'JetBrains Mono, SF Mono, Consolas, monospace',
      medical: 'IBM Plex Sans, Roboto, sans-serif'
    },
    fontSize: {
      xs: '0.75rem',    // 12px
      sm: '0.875rem',   // 14px
      base: '1rem',     // 16px
      lg: '1.125rem',   // 18px
      xl: '1.25rem',    // 20px
      '2xl': '1.5rem',  // 24px
      '3xl': '1.875rem', // 30px
      '4xl': '2.25rem', // 36px
    }
  },
  
  spacing: {
    px: '1px',
    0: '0',
    0.5: '0.125rem',  // 2px
    1: '0.25rem',     // 4px
    2: '0.5rem',      // 8px
    3: '0.75rem',     // 12px
    4: '1rem',        // 16px
    5: '1.25rem',     // 20px
    6: '1.5rem',      // 24px
    8: '2rem',        // 32px
    10: '2.5rem',     // 40px
    12: '3rem',       // 48px
    16: '4rem',       // 64px
    20: '5rem',       // 80px
  },
  
  borderRadius: {
    none: '0',
    sm: '0.25rem',    // 4px
    base: '0.5rem',   // 8px
    md: '0.75rem',    // 12px
    lg: '1rem',       // 16px
    xl: '1.5rem',     // 24px
    full: '9999px',
  },
  
  shadows: {
    xs: '0 1px 2px 0 rgb(0 0 0 / 0.05)',
    sm: '0 1px 3px 0 rgb(0 0 0 / 0.1)',
    base: '0 4px 6px -1px rgb(0 0 0 / 0.1)',
    md: '0 10px 15px -3px rgb(0 0 0 / 0.1)',
    lg: '0 20px 25px -5px rgb(0 0 0 / 0.1)',
    xl: '0 25px 50px -12px rgb(0 0 0 / 0.25)',
    inner: 'inset 0 2px 4px 0 rgb(0 0 0 / 0.05)',
    clinical: '0 0 0 3px oklch(55% 0.22 240 / 0.1)',
  },
  
  animation: {
    duration: {
      instant: '50ms',
      fast: '150ms',
      base: '250ms',
      slow: '350ms',
      slower: '500ms',
    },
    easing: {
      linear: 'linear',
      in: 'cubic-bezier(0.4, 0, 1, 1)',
      out: 'cubic-bezier(0, 0, 0.2, 1)',
      inOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
      spring: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)',
    }
  }
};
1.2 COMPONENTES BASE MODERNOS
tsx// CRIAR ARQUIVO: repomed-web/src/components/ui/Button.tsx

import { forwardRef, ButtonHTMLAttributes } from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import { Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';

const buttonVariants = cva(
  // Base styles
  'inline-flex items-center justify-center font-medium transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 active:scale-[0.98]',
  {
    variants: {
      variant: {
        primary: 'bg-primary-500 text-white hover:bg-primary-600 focus-visible:ring-primary-500',
        secondary: 'bg-neutral-100 text-neutral-900 hover:bg-neutral-200 focus-visible:ring-neutral-400',
        outline: 'border-2 border-neutral-300 bg-transparent hover:bg-neutral-50 focus-visible:ring-neutral-400',
        ghost: 'hover:bg-neutral-100 hover:text-neutral-900 focus-visible:ring-neutral-400',
        danger: 'bg-red-500 text-white hover:bg-red-600 focus-visible:ring-red-500',
        success: 'bg-green-500 text-white hover:bg-green-600 focus-visible:ring-green-500',
        clinical: 'bg-gradient-to-r from-primary-500 to-primary-600 text-white hover:from-primary-600 hover:to-primary-700',
      },
      size: {
        xs: 'h-7 px-2 text-xs rounded-md gap-1',
        sm: 'h-9 px-3 text-sm rounded-md gap-1.5',
        md: 'h-10 px-4 text-base rounded-lg gap-2',
        lg: 'h-12 px-6 text-lg rounded-lg gap-2',
        xl: 'h-14 px-8 text-xl rounded-xl gap-3',
      },
      fullWidth: {
        true: 'w-full',
        false: 'w-auto',
      }
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md',
      fullWidth: false,
    }
  }
);

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {
  loading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
}

export const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, fullWidth, loading, leftIcon, rightIcon, children, disabled, ...props }, ref) => {
    return (
      <button
        ref={ref}
        className={cn(buttonVariants({ variant, size, fullWidth }), className)}
        disabled={disabled || loading}
        {...props}
      >
        {loading ? (
          <Loader2 className="animate-spin" />
        ) : leftIcon}
        {children}
        {!loading && rightIcon}
      </button>
    );
  }
);

Button.displayName = 'Button';
1.3 LAYOUT MEDICAL WORKSPACE
tsx// CRIAR ARQUIVO: repomed-web/src/layouts/MedicalWorkspace.tsx

import { useState, useEffect } from 'react';
import { 
  Search, Menu, X, Bell, Settings, User, 
  FileText, Stethoscope, Calendar, PieChart,
  MessageSquare, HelpCircle, LogOut, Command
} from 'lucide-react';
import { CommandPalette } from '@/components/CommandPalette';
import { PatientPanel } from '@/components/workspace/PatientPanel';
import { EditorPanel } from '@/components/workspace/EditorPanel';
import { ValidationPanel } from '@/components/workspace/ValidationPanel';
import { OfflineIndicator } from '@/components/OfflineIndicator';
import { useHotkeys } from '@/hooks/useHotkeys';

export const MedicalWorkspace = ({ children }) => {
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [commandOpen, setCommandOpen] = useState(false);
  const [activePanel, setActivePanel] = useState('editor');
  
  // Atalhos de teclado globais
  useHotkeys('cmd+k', () => setCommandOpen(true));
  useHotkeys('cmd+/', () => setSidebarOpen(!sidebarOpen));
  useHotkeys('cmd+1', () => setActivePanel('patient'));
  useHotkeys('cmd+2', () => setActivePanel('editor'));
  useHotkeys('cmd+3', () => setActivePanel('validation'));
  
  const navigation = [
    { name: 'Dashboard', icon: PieChart, href: '/', badge: null },
    { name: 'Pacientes', icon: User, href: '/patients', badge: '127' },
    { name: 'Documentos', icon: FileText, href: '/documents', badge: '23' },
    { name: 'Consultas', icon: Stethoscope, href: '/appointments', badge: '5' },
    { name: 'Agenda', icon: Calendar, href: '/calendar', badge: null },
    { name: 'Mensagens', icon: MessageSquare, href: '/messages', badge: '3' },
  ];
  
  return (
    <div className="h-screen flex overflow-hidden bg-neutral-50">
      {/* Command Palette */}
      <CommandPalette open={commandOpen} onClose={() => setCommandOpen(false)} />
      
      {/* Sidebar */}
      <div className={cn(
        'flex flex-col w-64 bg-white border-r border-neutral-200 transition-all duration-300',
        !sidebarOpen && '-ml-64'
      )}>
        {/* Logo */}
        <div className="h-16 flex items-center px-6 border-b border-neutral-200">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-gradient-to-br from-primary-400 to-primary-600 rounded-lg flex items-center justify-center">
              <Stethoscope className="w-5 h-5 text-white" />
            </div>
            <span className="font-semibold text-lg">RepoMed IA</span>
          </div>
        </div>
        
        {/* Navigation */}
        <nav className="flex-1 px-3 py-4 space-y-1 overflow-y-auto">
          {navigation.map((item) => (
            
              key={item.name}
              href={item.href}
              className="flex items-center justify-between px-3 py-2 rounded-lg hover:bg-neutral-100 transition-colors group"
            >
              <div className="flex items-center gap-3">
                <item.icon className="w-5 h-5 text-neutral-500 group-hover:text-primary-500" />
                <span className="text-sm font-medium text-neutral-700">{item.name}</span>
              </div>
              {item.badge && (
                <span className="bg-primary-100 text-primary-600 text-xs font-medium px-2 py-0.5 rounded-full">
                  {item.badge}
                </span>
              )}
            </a>
          ))}
        </nav>
        
        {/* User Menu */}
        <div className="p-4 border-t border-neutral-200">
          <div className="flex items-center gap-3 p-3 rounded-lg hover:bg-neutral-100 cursor-pointer">
            <img 
              src="/api/placeholder/32/32" 
              alt="User" 
              className="w-8 h-8 rounded-full"
            />
            <div className="flex-1">
              <p className="text-sm font-medium">Dr. João Silva</p>
              <p className="text-xs text-neutral-500">CRM: 123456-SP</p>
            </div>
            <Settings className="w-4 h-4 text-neutral-400" />
          </div>
        </div>
      </div>
      
      {/* Main Content Area */}
      <div className="flex-1 flex flex-col">
        {/* Top Bar */}
        <header className="h-16 bg-white border-b border-neutral-200 flex items-center justify-between px-6">
          <div className="flex items-center gap-4">
            <button
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="p-2 hover:bg-neutral-100 rounded-lg"
            >
              <Menu className="w-5 h-5" />
            </button>
            
            {/* Global Search */}
            <div className="relative w-96">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-neutral-400" />
              <input
                type="text"
                placeholder="Buscar paciente, documento ou comando..."
                className="w-full pl-10 pr-4 py-2 bg-neutral-50 border border-neutral-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                onFocus={() => setCommandOpen(true)}
              />
              <kbd className="absolute right-3 top-1/2 -translate-y-1/2 px-2 py-1 text-xs bg-neutral-100 border border-neutral-200 rounded">
                ⌘K
              </kbd>
            </div>
          </div>
          
          <div className="flex items-center gap-3">
            {/* Notifications */}
            <button className="relative p-2 hover:bg-neutral-100 rounded-lg">
              <Bell className="w-5 h-5" />
              <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
            </button>
            
            {/* Help */}
            <button className="p-2 hover:bg-neutral-100 rounded-lg">
              <HelpCircle className="w-5 h-5" />
            </button>
            
            {/* Offline Indicator */}
            <OfflineIndicator />
          </div>
        </header>
        
        {/* Workspace Area - Tri-pane Layout */}
        <div className="flex-1 flex overflow-hidden">
          {/* Patient Panel */}
          <div className={cn(
            'w-80 bg-white border-r border-neutral-200 transition-all duration-300',
            activePanel !== 'patient' && 'w-12'
          )}>
            <PatientPanel collapsed={activePanel !== 'patient'} />
          </div>
          
          {/* Editor Panel */}
          <div className="flex-1 flex flex-col">
            <EditorPanel />
          </div>
          
          {/* Validation Panel */}
          <div className={cn(
            'w-96 bg-white border-l border-neutral-200 transition-all duration-300',
            activePanel !== 'validation' && 'w-12'
          )}>
            <ValidationPanel collapsed={activePanel !== 'validation'} />
          </div>
        </div>
      </div>
    </div>
  );
};
1.4 COMMAND PALETTE (ESTILO RAYCAST/LINEAR)
tsx// CRIAR ARQUIVO: repomed-web/src/components/CommandPalette.tsx

import { useState, useEffect, useRef } from 'react';
import { Command } from 'cmdk';
import { 
  Search, FileText, User, Calendar, Pill, 
  Stethoscope, FileSignature, Send, Brain,
  Clock, ArrowRight, Sparkles
} from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useAI } from '@/hooks/useAI';

export const CommandPalette = ({ open, onClose }) => {
  const [search, setSearch] = useState('');
  const [aiMode, setAiMode] = useState(false);
  const navigate = useNavigate();
  const { getSuggestions } = useAI();
  
  const actions = [
    {
      category: 'Documentos',
      items: [
        { icon: FileText, label: 'Nova Receita', shortcut: '⌘R', action: () => navigate('/documents/new/prescription') },
        { icon: FileSignature, label: 'Novo Atestado', shortcut: '⌘A', action: () => navigate('/documents/new/certificate') },
        { icon: Stethoscope, label: 'Solicitação de Exames', shortcut: '⌘E', action: () => navigate('/documents/new/exams') },
      ]
    },
    {
      category: 'Pacientes',
      items: [
        { icon: User, label: 'Buscar Paciente', shortcut: '⌘P', action: () => navigate('/patients') },
        { icon: User, label: 'Novo Paciente', shortcut: '⌘N', action: () => navigate('/patients/new') },
      ]
    },
    {
      category: 'IA Assistente',
      items: [
        { icon: Brain, label: 'Sugerir Diagnóstico', shortcut: '⌘D', action: () => setAiMode(true) },
        { icon: Pill, label: 'Verificar Interações', shortcut: '⌘I', action: () => {} },
        { icon: Sparkles, label: 'Preencher com IA', shortcut: '⌘F', action: () => {} },
      ]
    }
  ];
  
  return (
    <Command.Dialog
      open={open}
      onOpenChange={onClose}
      className="fixed inset-0 z-50 flex items-start justify-center pt-[20vh]"
    >
      <div className="fixed inset-0 bg-black/50 backdrop-blur-sm" onClick={onClose} />
      
      <div className="relative w-full max-w-2xl bg-white rounded-2xl shadow-2xl overflow-hidden">
        {/* Search Input */}
        <div className="flex items-center border-b border-neutral-200 px-4">
          <Search className="w-5 h-5 text-neutral-400" />
          <Command.Input
            value={search}
            onValueChange={setSearch}
            placeholder={aiMode ? "Descreva o que precisa..." : "Buscar comandos, pacientes ou documentos..."}
            className="w-full px-3 py-4 text-base bg-transparent outline-none"
          />
          {aiMode && (
            <div className="flex items-center gap-2 px-3 py-1 bg-gradient-to-r from-purple-100 to-blue-100 rounded-full">
              <Sparkles className="w-4 h-4 text-purple-600" />
              <span className="text-xs font-medium text-purple-600">IA Mode</span>
            </div>
          )}
        </div>
        
        {/* Results */}
        <Command.List className="max-h-96 overflow-y-auto p-2">
          {!aiMode ? (
            <>
              {/* Recent Items */}
              <Command.Group heading="Recentes" className="text-xs text-neutral-500 px-2 py-1.5">
                <Command.Item className="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-neutral-100 cursor-pointer">
                  <Clock className="w-4 h-4 text-neutral-400" />
                  <span className="flex-1">Maria Silva - Receita</span>
                  <span className="text-xs text-neutral-400">2 min atrás</span>
                </Command.Item>
              </Command.Group>
              
              {/* Actions */}
              {actions.map((group) => (
                <Command.Group key={group.category} heading={group.category} className="text-xs text-neutral-500 px-2 py-1.5 mt-3">
                  {group.items.map((item) => (
                    <Command.Item
                      key={item.label}
                      onSelect={item.action}
                      className="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-neutral-100 cursor-pointer group"
                    >
                      <div className="w-8 h-8 bg-neutral-100 rounded-lg flex items-center justify-center group-hover:bg-primary-100">
                        <item.icon className="w-4 h-4 text-neutral-600 group-hover:text-primary-600" />
                      </div>
                      <span className="flex-1">{item.label}</span>
                      <kbd className="px-2 py-0.5 text-xs bg-neutral-100 border border-neutral-200 rounded">
                        {item.shortcut}
                      </kbd>
                    </Command.Item>
                  ))}
                </Command.Group>
              ))}
            </>
          ) : (
            /* AI Suggestions */
            <div className="p-4 space-y-3">
              <div className="flex items-center gap-3 p-3 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg">
                <Brain className="w-5 h-5 text-purple-600" />
                <div className="flex-1">
                  <p className="text-sm font-medium">Sugestão de IA</p>
                  <p className="text-xs text-neutral-600">Baseado no histórico do paciente</p>
                </div>
              </div>
              
              {/* AI Results would go here */}
            </div>
          )}
        </Command.List>
        
        {/* Footer */}
        <div className="border-t border-neutral-200 px-4 py-2 flex items-center justify-between">
          <div className="flex items-center gap-4 text-xs text-neutral-500">
            <span className="flex items-center gap-1">
              <kbd className="px-1.5 py-0.5 bg-neutral-100 border border-neutral-200 rounded">↑↓</kbd>
              Navegar
            </span>
            <span className="flex items-center gap-1">
              <kbd className="px-1.5 py-0.5 bg-neutral-100 border border-neutral-200 rounded">↵</kbd>
              Selecionar
            </span>
            <span className="flex items-center gap-1">
              <kbd className="px-1.5 py-0.5 bg-neutral-100 border border-neutral-200 rounded">esc</kbd>
              Fechar
            </span>
          </div>
          
          <button
            onClick={() => setAiMode(!aiMode)}
            className="flex items-center gap-2 px-3 py-1 hover:bg-neutral-100 rounded-lg transition-colors"
          >
            <Sparkles className="w-4 h-4 text-purple-600" />
            <span className="text-xs font-medium">IA Mode</span>
          </button>
        </div>
      </div>
    </Command.Dialog>
  );
};

PARTE 2: SISTEMA DE IA MÉDICA
2.1 SERVIÇO DE IA NO BACKEND
javascript// CRIAR ARQUIVO: repomed-api/src/services/AIService.js

const OpenAI = require('openai');
const { db } = require('../config/database');

class AIService {
  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    
    // Cache de conhecimento médico
    this.medicalKnowledge = {
      medications: new Map(),
      diseases: new Map(),
      interactions: new Map(),
    };
  }
  
  /**
   * Sugere diagnósticos baseado em sintomas
   */
  async suggestDiagnosis(symptoms, patientHistory) {
    const prompt = `
      Como assistente médico, analise os seguintes sintomas e histórico:
      
      SINTOMAS: ${symptoms.join(', ')}
      HISTÓRICO: ${JSON.stringify(patientHistory)}
      
      Sugira os 5 diagnósticos mais prováveis com CID-10, ordenados por probabilidade.
      Retorne em formato JSON estruturado.
    `;
    
    const response = await this.openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: 'Você é um assistente médico especializado em diagnósticos.' },
        { role: 'user', content: prompt }
      ],
      response_format: { type: 'json_object' },
      temperature: 0.3,
    });
    
    const suggestions = JSON.parse(response.choices[0].message.content);
    
    // Salvar no banco para análise
    await db.query(
      'INSERT INTO ai_suggestions (type, input, output, confidence) VALUES ($1, $2, $3, $4)',
      ['diagnosis', { symptoms, patientHistory }, suggestions, suggestions.confidence]
    );
    
    return suggestions;
  }
  
  /**
   * Verifica interações medicamentosas
   */
  async checkMedicationInteractions(medications) {
    // Consultar base ANVISA
    const interactions = [];
    
    for (let i = 0; i < medications.length; i++) {
      for (let j = i + 1; j < medications.length; j++) {
        const interaction = await this.checkPairInteraction(
          medications[i],
          medications[j]
        );
        
        if (interaction) {
          interactions.push(interaction);
        }
      }
    }
    
    return {
      safe: interactions.length === 0,
      interactions,
      recommendations: await this.getAlternativeMedications(interactions)
    };
  }
  
  /**
   * Preenche automaticamente campos do documento
   */
  async autoFillDocument(templateType, patientId) {
    const patient = await db.query(
      'SELECT * FROM patients WHERE id = $1',
      [patientId]
    );
    
    const history = await db.query(
      'SELECT * FROM medical_history WHERE patient_id = $1 ORDER BY created_at DESC LIMIT 10',
      [patientId]
    );
    
    const lastPrescriptions = await db.query(
      'SELECT * FROM prescriptions WHERE patient_id = $1 ORDER BY created_at DESC LIMIT 5',
      [patientId]
    );
    
    // Usar IA para sugerir preenchimento baseado em padrões
    const prompt = `
      Baseado no histórico médico, sugira o preenchimento para ${templateType}:
      
      PACIENTE: ${JSON.stringify(patient.rows[0])}
      HISTÓRICO: ${JSON.stringify(history.rows)}
      ÚLTIMAS PRESCRIÇÕES: ${JSON.stringify(lastPrescriptions.rows)}
      
      Retorne os campos preenchidos em JSON.
    `;
    
    const response = await this.openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: 'Você é um assistente médico que ajuda a preencher documentos.' },
        { role: 'user', content: prompt }
      ],
      response_format: { type: 'json_object' },
      temperature: 0.2,
    });
    
    return JSON.parse(response.choices[0].message.content);
  }
  
  /**
   * Transcrição de áudio para texto
   */
  async transcribeAudio(audioBuffer) {
    const transcription = await this.openai.audio.transcriptions.create({
      file: audioBuffer,
      model: 'whisper-1',
      language: 'pt',
      response_format: 'verbose_json',
    });
    
    // Extrair informações médicas relevantes
    const medicalInfo = await this.extractMedicalInfo(transcription.text);
    
    return {
      text: transcription.text,
      duration: transcription.duration,
      medicalInfo,
      segments: transcription.segments
    };
  }
  
  /**
   * OCR para digitalização de documentos
   */
  async performOCR(imageBuffer) {
    // Usar Vision API para extrair texto
    const response = await this.openai.chat.completions.create({
      model: 'gpt-4-vision-preview',
      messages: [
        {
          role: 'user',
          content: [
            { type: 'text', text: 'Extraia todo o texto deste documento médico, mantendo a formatação.' },
            { type: 'image_url', image_url: { url: `data:image/jpeg;base64,${imageBuffer.toString('base64')}` } }
          ]
        }
      ],
      max_tokens: 4096,
    });
    
    const extractedText = response.choices[0].message.content;
    
    // Estruturar o texto extraído
    const structured = await this.structureExtractedText(extractedText);
    
    return structured;
  }
  
  /**
   * Análise preditiva de riscos
   */
  async predictHealthRisks(patientId) {
    const patientData = await this.getCompletePatientData(patientId);
    
    const prompt = `
      Analise o perfil completo do paciente e identifique riscos de saúde:
      
      ${JSON.stringify(patientData)}
      
      Retorne:
      1. Riscos imediatos (próximos 30 dias)
      2. Riscos a médio prazo (3-6 meses)
      3. Riscos a longo prazo (1+ ano)
      4. Recomendações preventivas
      5. Exames sugeridos
    `;
    
    const response = await this.openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: 'Você é um especialista em medicina preventiva e análise de riscos.' },
        { role: 'user', content: prompt }
      ],
      response_format: { type: 'json_object' },
      temperature: 0.3,
    });
    
    const risks = JSON.parse(response.choices[0].message.content);
    
    // Salvar análise
    await db.query(
      'INSERT INTO risk_assessments (patient_id, assessment, created_by_ai) VALUES ($1, $2, true)',
      [patientId, risks]
    );
    
    return risks;
  }
}

module.exports = new AIService();
2.2 HOOKS DE IA NO FRONTEND
typescript// CRIAR ARQUIVO: repomed-web/src/hooks/useAI.ts

import { useState, useCallback } from 'react';
import { useMutation, useQuery } from '@tanstack/react-query';
import { api } from '@/lib/api';
import { toast } from '@/components/ui/toast';

interface AIContext {
  patientId?: string;
  documentType?: string;
  symptoms?: string[];
  medications?: string[];
}

export const useAI = (context?: AIContext) => {
  const [suggestions, setSuggestions] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  
  // Sugerir diagnósticos
  const suggestDiagnosis = useMutation({
    mutationFn: async (symptoms: string[]) => {
      const response = await api.post('/ai/suggest-diagnosis', {
        symptoms,
        patientId: context?.patientId
      });
      return response.data;
    },
    onSuccess: (data) => {
      setSuggestions(data.diagnoses);
      toast.success('Diagnósticos sugeridos com sucesso');
    },
    onError: () => {
      toast.error('Erro ao sugerir diagnósticos');
    }
  });
  
  // Verificar interações medicamentosas
  const checkInteractions = useMutation({
    mutationFn: async (medications: string[]) => {
      const response = await api.post('/ai/check-interactions', {
        medications
      });
      return response.data;
    },
    onSuccess: (data) => {
      if (!data.safe) {
        toast.warning(`${data.interactions.length} interações encontradas`);
      } else {
        toast.success('Nenhuma interação perigosa detectada');
      }
    }
  });
  
  // Auto-preencher documento
  const autoFillDocument = useMutation({
    mutationFn: async (templateType: string) => {
      const response = await api.post('/ai/auto-fill', {
        templateType,
        patientId: context?.patientId
      });
      return response.data;
    },
    onSuccess: (data) => {
      toast.success('Documento preenchido com IA');
    }
  });
  
  // Transcrever áudio
  const transcribeAudio = useCallback(async (audioBlob: Blob) => {
    setIsProcessing(true);
    
    const formData = new FormData();
    formData.append('audio', audioBlob);
    
    try {
      const response = await api.post('/ai/transcribe', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      
      return response.data;
    } catch (error) {
      toast.error('Erro na transcrição');
      throw error;
    } finally {
      setIsProcessing(false);
    }
  }, []);
  
  // OCR de documentos
  const performOCR = useCallback(async (imageFile: File) => {
    setIsProcessing(true);
    
    const formData = new FormData();
    formData.append('image', imageFile);
    
    try {
      const response = await api.post('/ai/ocr', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      
      return response.data;
    } catch (error) {
      toast.error('Erro no OCR');
      throw error;
    } finally {
      setIsProcessing(false);
    }
  }, []);
  
  // Análise preditiva
  const predictRisks = useQuery({
    queryKey: ['ai', 'risks', context?.patientId],
    queryFn: async () => {
      if (!context?.patientId) return null;
      
      const response = await api.get(`/ai/predict-risks/${context.patientId}`);
      return response.data;
    },
    enabled: !!context?.patientId,
    staleTime: 1000 * 60 * 60, // 1 hora
  });
  
  return {
    // Estados
    suggestions,
    isProcessing,
    
    // Mutations
    suggestDiagnosis: suggestDiagnosis.mutate,
    checkInteractions: checkInteractions.mutate,
    autoFillDocument: autoFillDocument.mutate,
    
    // Funções
    transcribeAudio,
    performOCR,
    
    // Queries
    risks: predictRisks.data,
    
    // Loading states
    isLoading: suggestDiagnosis.isLoading || 
               checkInteractions.isLoading || 
               autoFillDocument.isLoading ||
               isProcessing,
  };
};

PARTE 3: ASSINATURA DIGITAL ICP-BRASIL
3.1 SERVIÇO DE ASSINATURA BACKEND
javascript// CRIAR ARQUIVO: repomed-api/src/services/SignatureService.js

const forge = require('node-forge');
const axios = require('axios');
const { db } = require('../config/database');
const pdfLib = require('pdf-lib');
const QRCode = require('qrcode');

class SignatureService {
  constructor() {
    this.itiValidatorUrl = 'https://validar.iti.gov.br/api/v1/validate';
  }
  
  /**
   * Assinar documento com certificado ICP-Brasil
   */
  async signDocument(documentId, certificate, pin) {
    try {
      // Buscar documento
      const doc = await db.query(
        'SELECT * FROM documents WHERE id = $1',
        [documentId]
      );
      
      if (!doc.rows[0]) {
        throw new Error('Documento não encontrado');
      }
      
      // Validar certificado
      const certValid = await this.validateCertificate(certificate);
      if (!certValid.valid) {
        throw new Error(`Certificado inválido: ${certValid.reason}`);
      }
      
      // Criar hash do documento
      const documentHash = this.createHash(doc.rows[0].content);
      
      // Assinar com chave privada
      const signature = await this.createSignature(
        documentHash,
        certificate,
        pin
      );
      
      // Adicionar assinatura ao PDF
      const signedPdf = await this.embedSignatureInPdf(
        doc.rows[0].pdf_content,
        signature,
        certificate
      );
      
      // Gerar QR Code de validação
      const qrCode = await this.generateValidationQR(documentId, signature);
      
      // Salvar assinatura no banco
      await db.query(
        `UPDATE documents 
         SET signed = true,
             signature = $1,
             signed_at = NOW(),
             signed_by = $2,
             pdf_signed = $3,
             validation_qr = $4
         WHERE id = $5`,
        [signature, certificate.subject, signedPdf, qrCode, documentId]
      );
      
      // Registrar no blockchain (opcional)
      await this.registerInBlockchain(documentId, documentHash, signature);
      
      return {
        success: true,
        documentId,
        signature,
        qrCode,
        validationUrl: `${process.env.APP_URL}/verify/${documentId}`
      };
      
    } catch (error) {
      console.error('Erro ao assinar documento:', error);
      throw error;
    }
  }
  
  /**
   * Validar certificado ICP-Brasil
   */
  async validateCertificate(certificateData) {
    try {
      // Converter para formato forge
      const cert = forge.pki.certificateFromPem(certificateData);
      
      // Verificar validade temporal
      const now = new Date();
      if (now < cert.validity.notBefore || now > cert.validity.notAfter) {
        return { valid: false, reason: 'Certificado expirado' };
      }
      
      // Verificar cadeia de certificação ICP-Brasil
      const chainValid = await this.validateCertificateChain(cert);
      if (!chainValid) {
        return { valid: false, reason: 'Cadeia de certificação inválida' };
      }
      
      // Verificar revogação (OCSP)
      const revoked = await this.checkRevocation(cert);
      if (revoked) {
        return { valid: false, reason: 'Certificado revogado' };
      }
      
      // Verificar se é certificado médico (e-CPF com CRM)
      const isMedical = this.isMedicalCertificate(cert);
      if (!isMedical) {
        return { valid: false, reason: 'Certificado não é válido para uso médico' };
      }
      
      return { valid: true, certificate: cert };
      
    } catch (error) {
      return { valid: false, reason: error.message };
    }
  }
  
  /**
   * Criar hash SHA-256 do documento
   */
  createHash(content) {
    const md = forge.md.sha256.create();
    md.update(content, 'utf8');
    return md.digest().toHex();
  }
  
  /**
   * Criar assinatura digital
   */
  async createSignature(hash, certificate, pin) {
    try {
      // Desbloquear chave privada com PIN
      const privateKey = await this.unlockPrivateKey(certificate, pin);
      
      // Criar assinatura PKCS#7
      const p7 = forge.pkcs7.createSignedData();
      p7.content = forge.util.createBuffer(hash, 'utf8');
      
      p7.addCertificate(certificate);
      p7.addSigner({
        key: privateKey,
        certificate: certificate,
        digestAlgorithm: forge.pki.oids.sha256,
        authenticatedAttributes: [
          {
            type: forge.pki.oids.contentType,
            value: forge.pki.oids.data
          },
          {
            type: forge.pki.oids.messageDigest
          },
          {
            type: forge.pki.oids.signingTime,
            value: new Date()
          }
        ]
      });
      
      // Assinar
      p7.sign();
      
      // Converter para Base64
      const asn1 = forge.asn1.toDer(p7.toAsn1());
      return forge.util.encode64(asn1.getBytes());
      
    } catch (error) {
      throw new Error('Erro ao criar assinatura: ' + error.message);
    }
  }
  
  /**
   * Incorporar assinatura no PDF
   */
  async embedSignatureInPdf(pdfBuffer, signature, certificate) {
    const pdfDoc = await pdfLib.PDFDocument.load(pdfBuffer);
    
    // Adicionar campo de assinatura visível
    const pages = pdfDoc.getPages();
    const lastPage = pages[pages.length - 1];
    
    // Adicionar texto de assinatura
    const { width, height } = lastPage.getSize();
    lastPage.drawText('Documento assinado digitalmente', {
      x: 50,
      y: 50,
      size: 10,
    });
    
    // Adicionar informações do certificado
    const certInfo = this.extractCertificateInfo(certificate);
    lastPage.drawText(`Assinado por: ${certInfo.name}`, {
      x: 50,
      y: 35,
      size: 8,
    });
    
    lastPage.drawText(`CRM: ${certInfo.crm}`, {
      x: 50,
      y: 25,
      size: 8,
    });
    
    lastPage.drawText(`Data: ${new Date().toLocaleString('pt-BR')}`, {
      x: 50,
      y: 15,
      size: 8,
    });
    
    // Adicionar QR Code
    const qrCodeImage = await pdfDoc.embedPng(
      await QRCode.toBuffer(signature.substring(0, 100))
    );
    
    lastPage.drawImage(qrCodeImage, {
      x: width - 100,
      y: 15,
      width: 75,
      height: 75,
    });
    
    // Adicionar metadados
    pdfDoc.setTitle('Documento Médico Assinado');
    pdfDoc.setAuthor(certInfo.name);
    pdfDoc.setCreator('RepoMed IA');
    pdfDoc.setProducer('RepoMed IA - ICP-Brasil');
    
    // Salvar PDF assinado
    const signedPdfBytes = await pdfDoc.save();
    
    return Buffer.from(signedPdfBytes);
  }
  
  /**
   * Validar assinatura existente
   */
  async validateSignature(documentId) {
    try {
      const doc = await db.query(
        'SELECT * FROM documents WHERE id = $1',
        [documentId]
      );
      
      if (!doc.rows[0]) {
        return { valid: false, reason: 'Documento não encontrado' };
      }
      
      if (!doc.rows[0].signature) {
        return { valid: false, reason: 'Documento não assinado' };
      }
      
      // Validar com ITI
      const response = await axios.post(this.itiValidatorUrl, {
        signature: doc.rows[0].signature,
        document: doc.rows[0].content
      });
      
      return {
        valid: response.data.valid,
        signer: response.data.signer,
        timestamp: response.data.timestamp,
        certificate: response.data.certificate
      };
      
    } catch (error) {
      return { valid: false, reason: error.message };
    }
  }
  
  /**
   * Gerar QR Code de validação
   */
  async generateValidationQR(documentId, signature) {
    const validationUrl = `${process.env.APP_URL}/verify/${documentId}`;
    const qrData = {
      url: validationUrl,
      documentId,
      hash: signature.substring(0, 10),
      timestamp: new Date().toISOString()
    };
    
    const qrCode = await QRCode.toDataURL(JSON.stringify(qrData));
    return qrCode;
  }
}

module.exports = new SignatureService();

PARTE 4: INTEGRAÇÃO FHIR/RNDS
4.1 SERVIÇO FHIR
javascript// CRIAR ARQUIVO: repomed-api/src/services/FHIRService.js

const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

class FHIRService {
  constructor() {
    this.rndsUrl = process.env.RNDS_URL || 'https://ehr.saude.gov.br/api/fhir/r4';
    this.authToken = null;
  }
  
  /**
   * Converter documento para formato FHIR
   */
  async documentToFHIR(document, type) {
    const fhirResource = {
      resourceType: 'DocumentReference',
      id: uuidv4(),
      meta: {
        profile: ['http://hl7.org/fhir/StructureDefinition/DocumentReference']
      },
      status: 'current',
      type: this.getDocumentType(type),
      subject: {
        reference: `Patient/${document.patient_id}`
      },
      date: new Date().toISOString(),
      author: [{
        reference: `Practitioner/${document.doctor_id}`
      }],
      content: [{
        attachment: {
          contentType: 'application/pdf',
          data: document.pdf_content.toString('base64'),
          title: document.title
        }
      }]
    };
    
    // Adicionar campos específicos por tipo
    switch (type) {
      case 'prescription':
        return this.createMedicationRequest(document);
      case 'certificate':
        return this.createClinicalDocument(document);
      case 'exam_request':
        return this.createServiceRequest(document);
      default:
        return fhirResource;
    }
  }
  
  /**
   * Criar MedicationRequest FHIR
   */
  createMedicationRequest(prescription) {
    return {
      resourceType: 'MedicationRequest',
      id: uuidv4(),
      meta: {
        profile: ['http://hl7.org/fhir/StructureDefinition/MedicationRequest']
      },
      status: 'active',
      intent: 'order',
      medication: {
        text: prescription.medication_name,
        coding: [{
          system: 'http://www.anvisa.gov.br/medicamentos',
          code: prescription.medication_code,
          display: prescription.medication_name
        }]
      },
      subject: {
        reference: `Patient/${prescription.patient_id}`,
        display: prescription.patient_name
      },
      authoredOn: new Date().toISOString(),
      requester: {
        reference: `Practitioner/${prescription.doctor_id}`,
        display: prescription.doctor_name
      },
      dosageInstruction: [{
        text: prescription.dosage_text,
        timing: {
          repeat: {
            frequency: prescription.frequency,
            period: prescription.period,
            periodUnit: prescription.period_unit
          }
        },
        route: {
          coding: [{
            system: 'http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration',
            code: prescription.route_code,
            display: prescription.route_display
          }]
        },
        doseAndRate: [{
          doseQuantity: {
            value: prescription.dose_value,
            unit: prescription.dose_unit,
            system: 'http://unitsofmeasure.org'
          }
        }]
      }],
      dispenseRequest: {
        validityPeriod: {
          start: new Date().toISOString(),
          end: new Date(Date.now() + 30*24*60*60*1000).toISOString()
        },
        quantity: {
          value: prescription.quantity,
          unit: prescription.quantity_unit
        }
      }
    };
  }
  
  /**
   * Enviar para RNDS
   */
  async sendToRNDS(fhirResource) {
    try {
      // Autenticar se necessário
      if (!this.authToken) {
        await this.authenticate();
      }
      
      // Validar recurso
      const validationResult = await this.validateResource(fhirResource);
      if (!validationResult.valid) {
        throw new Error(`Recurso FHIR inválido: ${validationResult.errors.join(', ')}`);
      }
      
      // Enviar para RNDS
      const response = await axios.post(
        `${this.rndsUrl}/${fhirResource.resourceType}`,
        fhirResource,
        {
          headers: {
            'Authorization': `Bearer ${this.authToken}`,
            'Content-Type': 'application/fhir+json',
            'Accept': 'application/fhir+json'
          }
        }
      );
      
      return {
        success: true,
        resourceId: response.data.id,
        location: response.headers.location
      };
      
    } catch (error) {
      console.error('Erro ao enviar para RNDS:', error);
      throw error;
    }
  }
  
  /**
   * Buscar dados da RNDS
   */
  async searchPatientDocuments(cpf) {
    try {
      if (!this.authToken) {
        await this.authenticate();
      }
      
      // Buscar paciente por CPF
      const patientResponse = await axios.get(
        `${this.rndsUrl}/Patient`,
        {
          params: {
            identifier: cpf
          },
          headers: {
            'Authorization': `Bearer ${this.authToken}`,
            'Accept': 'application/fhir+json'
          }
        }
      );
      
      if (patientResponse.data.total === 0) {
        return { documents: [] };
      }
      
      const patientId = patientResponse.data.entry[0].resource.id;
      
      // Buscar documentos do paciente
      const documentsResponse = await axios.get(
        `${this.rndsUrl}/DocumentReference`,
        {
          params: {
            subject: `Patient/${patientId}`,
            _sort: '-date',
            _count: 100
          },
          headers: {
            'Authorization': `Bearer ${this.authToken}`,
            'Accept': 'application/fhir+json'
          }
        }
      );
      
      return {
        patient: patientResponse.data.entry[0].resource,
        documents: documentsResponse.data.entry || []
      };
      
    } catch (error) {
      console.error('Erro ao buscar na RNDS:', error);
      throw error;
    }
  }
}

module.exports = new FHIRService();

PARTE 5: BANCO DE DADOS ATUALIZADO
5.1 MIGRATIONS POSTGRESQL
sql-- CRIAR ARQUIVO: repomed-api/migrations/001_create_tables.sql

-- Enable extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Multi-tenant schema
CREATE SCHEMA IF NOT EXISTS tenant_base;

-- Audit function
CREATE OR REPLACE FUNCTION audit_trigger_function()
RETURNS trigger AS $$
BEGIN
  NEW.updated_at = NOW();
  
  INSERT INTO audit_log (
    tenant_id,
    user_id,
    action,
    resource_type,
    resource_id,
    changes,
    ip_address,
    created_at
  ) VALUES (
    current_setting('app.tenant_id')::UUID,
    current_setting('app.user_id')::UUID,
    TG_OP,
    TG_TABLE_NAME,
    NEW.id,
    jsonb_build_object(
      'old', to_jsonb(OLD),
      'new', to_jsonb(NEW)
    ),
    inet_client_addr(),
    NOW()
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Core tables
CREATE TABLE tenants (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(255) NOT NULL,
  subdomain VARCHAR(100) UNIQUE NOT NULL,
  plan VARCHAR(50) DEFAULT 'starter',
  settings JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID REFERENCES tenants(id),
  email VARCHAR(255) NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  full_name VARCHAR(255) NOT NULL,
  crm VARCHAR(50),
  cpf VARCHAR(14),
  role VARCHAR(50) DEFAULT 'doctor',
  avatar_url TEXT,
  settings JSONB DEFAULT '{}',
  last_login TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(tenant_id, email)
);

CREATE TABLE patients (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID REFERENCES tenants(id),
  cpf VARCHAR(14) NOT NULL,
  full_name VARCHAR(255) NOT NULL,
  birth_date DATE NOT NULL,
  gender VARCHAR(20),
  blood_type VARCHAR(5),
  phone VARCHAR(20),
  email VARCHAR(255),
  address JSONB,
  emergency_contact JSONB,
  insurance JSONB,
  allergies TEXT[],
  chronic_conditions TEXT[],
  medications TEXT[],
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(tenant_id, cpf)
);

CREATE TABLE templates (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID REFERENCES tenants(id),
  code VARCHAR(50) NOT NULL,
  name VARCHAR(255) NOT NULL,
  category VARCHAR(100) NOT NULL,
  specialty VARCHAR(100),
  fields JSONB NOT NULL,
  content TEXT NOT NULL,
  variables JSONB,
  compliance JSONB,
  version VARCHAR(20) DEFAULT '1.0.0',
  is_active BOOLEAN DEFAULT true,
  created_by UUID REFERENCES users(id),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(tenant_id, code, version)
);

CREATE TABLE documents (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID REFERENCES tenants(id),
  template_id UUID REFERENCES templates(id),
  patient_id UUID REFERENCES patients(id),
  doctor_id UUID REFERENCES users(id),
  type VARCHAR(50) NOT NULL,
  title VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  data JSONB NOT NULL,
  pdf_content BYTEA,
  status VARCHAR(50) DEFAULT 'draft',
  
  -- Signature fields
  signed BOOLEAN DEFAULT false,
  signature TEXT,
  signed_at TIMESTAMPTZ,
  certificate_info JSONB,
  validation_qr TEXT,
  
  -- FHIR fields
  fhir_resource_id VARCHAR(255),
  fhir_resource JSONB,
  sent_to_rnds BOOLEAN DEFAULT false,
  rnds_response JSONB,
  
  -- Metadata
  tags TEXT[],
  shared_with UUID[],
  valid_until DATE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE prescriptions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  document_id UUID REFERENCES documents(id),
  patient_id UUID REFERENCES patients(id),
  medications JSONB NOT NULL,
  valid_days INTEGER DEFAULT 30,
  special_control BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE appointments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID REFERENCES tenants(id),
  patient_id UUID REFERENCES patients(id),
  doctor_id UUID REFERENCES users(id),
  date_time TIMESTAMPTZ NOT NULL,
  duration_minutes INTEGER DEFAULT 30,
  type VARCHAR(50),
  status VARCHAR(50) DEFAULT 'scheduled',
  reason TEXT,
  notes TEXT,
  documents UUID[],
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- AI tables
CREATE TABLE ai_suggestions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID REFERENCES tenants(id),
  document_id UUID REFERENCES documents(id),
  type VARCHAR(50) NOT NULL,
  input JSONB NOT NULL,
  output JSONB NOT NULL,
  confidence DECIMAL(3,2),
  accepted BOOLEAN,
  feedback TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE ai_interactions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID REFERENCES tenants(id),
  user_id UUID REFERENCES users(id),
  type VARCHAR(50) NOT NULL,
  prompt TEXT NOT NULL,
  response TEXT NOT NULL,
  tokens_used INTEGER,
  cost DECIMAL(10,4),
  duration_ms INTEGER,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Audit table
CREATE TABLE audit_log (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID,
  user_id UUID,
  action VARCHAR(50),
  resource_type VARCHAR(50),
  resource_id UUID,
  changes JSONB,
  ip_address INET,
  user_agent TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_documents_tenant_patient ON documents(tenant_id, patient_id);
CREATE INDEX idx_documents_tenant_doctor ON documents(tenant_id, doctor_id);
CREATE INDEX idx_documents_tenant_status ON documents(tenant_id, status);
CREATE INDEX idx_documentsTentar novamenteRNContinuarEditarContinuando a implementação do prompt para o Claude Coder:
sql-- Continuação dos indexes
CREATE INDEX idx_documents_created_at ON documents(created_at DESC);
CREATE INDEX idx_patients_tenant_cpf ON patients(tenant_id, cpf);
CREATE INDEX idx_appointments_date ON appointments(date_time);
CREATE INDEX idx_audit_log_tenant_date ON audit_log(tenant_id, created_at DESC);
CREATE INDEX idx_ai_suggestions_document ON ai_suggestions(document_id);

-- Row Level Security
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE patients ENABLE ROW LEVEL SECURITY;
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE templates ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY tenant_isolation_users ON users
  USING (tenant_id = current_setting('app.tenant_id')::UUID);

CREATE POLICY tenant_isolation_patients ON patients
  USING (tenant_id = current_setting('app.tenant_id')::UUID);

CREATE POLICY tenant_isolation_documents ON documents
  USING (tenant_id = current_setting('app.tenant_id')::UUID);

-- Add audit triggers
CREATE TRIGGER audit_users AFTER INSERT OR UPDATE OR DELETE ON users
  FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER audit_patients AFTER INSERT OR UPDATE OR DELETE ON patients
  FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER audit_documents AFTER INSERT OR UPDATE OR DELETE ON documents
  FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

PARTE 6: COMPONENTES DE DOCUMENTO AVANÇADOS
6.1 EDITOR DE DOCUMENTO MÉDICO COM IA
tsx// CRIAR ARQUIVO: repomed-web/src/components/workspace/DocumentEditor.tsx

import { useState, useEffect, useCallback, useRef } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import {
  Save, Send, FileSignature, Brain, Mic, Camera,
  AlertTriangle, CheckCircle, Loader2, Sparkles,
  Clock, Eye, Download, Share2, Copy
} from 'lucide-react';
import { Button } from '@/components/ui/Button';
import { useAI } from '@/hooks/useAI';
import { useSignature } from '@/hooks/useSignature';
import { RichTextEditor } from '@/components/RichTextEditor';
import { MedicationField } from '@/components/fields/MedicationField';
import { DiagnosisField } from '@/components/fields/DiagnosisField';

const prescriptionSchema = z.object({
  patient_id: z.string().uuid(),
  medications: z.array(z.object({
    name: z.string().min(1),
    dosage: z.string().min(1),
    frequency: z.string().min(1),
    duration: z.string().optional(),
    instructions: z.string().optional()
  })).min(1),
  instructions: z.string().optional(),
  valid_days: z.number().min(1).max(180).default(30)
});

export const DocumentEditor = ({ template, patient, onSave }) => {
  const [isRecording, setIsRecording] = useState(false);
  const [aiSuggestions, setAiSuggestions] = useState(null);
  const [showValidation, setShowValidation] = useState(false);
  const editorRef = useRef(null);
  
  const { 
    suggestDiagnosis, 
    checkInteractions, 
    autoFillDocument,
    transcribeAudio,
    isLoading: aiLoading 
  } = useAI({ patientId: patient?.id });
  
  const { signDocument, validateSignature } = useSignature();
  
  const {
    control,
    handleSubmit,
    watch,
    setValue,
    formState: { errors, isDirty, isSubmitting }
  } = useForm({
    resolver: zodResolver(prescriptionSchema),
    defaultValues: {
      patient_id: patient?.id,
      medications: [{ name: '', dosage: '', frequency: '' }],
      valid_days: 30
    }
  });
  
  const medications = watch('medications');
  
  // Auto-verificar interações ao adicionar medicamentos
  useEffect(() => {
    if (medications?.length > 1) {
      const medNames = medications.map(m => m.name).filter(Boolean);
      if (medNames.length > 1) {
        checkInteractions(medNames);
      }
    }
  }, [medications]);
  
  // Auto-preencher com IA
  const handleAutoFill = useCallback(async () => {
    const suggestions = await autoFillDocument(template.type);
    
    if (suggestions.medications) {
      setValue('medications', suggestions.medications);
    }
    if (suggestions.instructions) {
      setValue('instructions', suggestions.instructions);
    }
    
    setAiSuggestions(suggestions);
  }, [template, autoFillDocument, setValue]);
  
  // Transcrição de voz
  const handleVoiceInput = useCallback(async () => {
    if (!isRecording) {
      setIsRecording(true);
      
      // Iniciar gravação
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      const chunks = [];
      
      mediaRecorder.ondataavailable = (e) => chunks.push(e.data);
      
      mediaRecorder.onstop = async () => {
        const blob = new Blob(chunks, { type: 'audio/webm' });
        const transcription = await transcribeAudio(blob);
        
        // Adicionar texto transcrito ao editor
        if (editorRef.current) {
          editorRef.current.insertText(transcription.text);
        }
        
        // Extrair informações médicas
        if (transcription.medicalInfo) {
          if (transcription.medicalInfo.medications) {
            setValue('medications', transcription.medicalInfo.medications);
          }
        }
        
        setIsRecording(false);
      };
      
      mediaRecorder.start();
      
      // Parar após 60 segundos
      setTimeout(() => {
        if (mediaRecorder.state === 'recording') {
          mediaRecorder.stop();
          stream.getTracks().forEach(track => track.stop());
        }
      }, 60000);
      
    } else {
      // Parar gravação
      setIsRecording(false);
    }
  }, [isRecording, transcribeAudio, setValue]);
  
  // Salvar documento
  const onSubmit = async (data) => {
    try {
      // Validar com IA antes de salvar
      setShowValidation(true);
      
      // Salvar documento
      const document = await onSave({
        ...data,
        template_id: template.id,
        patient_id: patient.id,
        status: 'draft'
      });
      
      // Sugerir assinatura
      if (document.id) {
        const shouldSign = confirm('Deseja assinar o documento agora?');
        if (shouldSign) {
          await signDocument(document.id);
        }
      }
      
    } catch (error) {
      console.error('Erro ao salvar documento:', error);
    }
  };
  
  return (
    <div className="flex flex-col h-full">
      {/* Header do Editor */}
      <div className="px-6 py-4 border-b border-neutral-200 bg-white">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <h2 className="text-lg font-semibold">{template.name}</h2>
            
            {patient && (
              <div className="flex items-center gap-2 px-3 py-1 bg-neutral-100 rounded-lg">
                <span className="text-sm text-neutral-600">Paciente:</span>
                <span className="text-sm font-medium">{patient.name}</span>
              </div>
            )}
            
            {isDirty && (
              <span className="flex items-center gap-1 text-xs text-amber-600">
                <Clock className="w-3 h-3" />
                Não salvo
              </span>
            )}
          </div>
          
          <div className="flex items-center gap-2">
            {/* Ações de IA */}
            <Button
              variant="outline"
              size="sm"
              onClick={handleAutoFill}
              disabled={aiLoading}
              leftIcon={aiLoading ? <Loader2 className="animate-spin" /> : <Sparkles />}
            >
              Preencher com IA
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={handleVoiceInput}
              className={isRecording ? 'bg-red-50 border-red-300' : ''}
              leftIcon={<Mic className={isRecording ? 'text-red-500 animate-pulse' : ''} />}
            >
              {isRecording ? 'Gravando...' : 'Ditado'}
            </Button>
            
            {/* Ações do documento */}
            <Button
              variant="outline"
              size="sm"
              leftIcon={<Eye />}
            >
              Preview
            </Button>
            
            <Button
              variant="primary"
              size="sm"
              onClick={handleSubmit(onSubmit)}
              disabled={isSubmitting}
              leftIcon={isSubmitting ? <Loader2 className="animate-spin" /> : <Save />}
            >
              Salvar
            </Button>
          </div>
        </div>
        
        {/* Sugestões de IA */}
        {aiSuggestions && (
          <div className="mt-3 p-3 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg">
            <div className="flex items-start gap-3">
              <Brain className="w-5 h-5 text-purple-600 flex-shrink-0 mt-0.5" />
              <div className="flex-1">
                <p className="text-sm font-medium text-purple-900">Sugestões da IA</p>
                <p className="text-xs text-purple-700 mt-1">
                  {aiSuggestions.summary}
                </p>
              </div>
              <Button
                variant="ghost"
                size="xs"
                onClick={() => setAiSuggestions(null)}
              >
                Dispensar
              </Button>
            </div>
          </div>
        )}
      </div>
      
      {/* Área do Editor */}
      <div className="flex-1 overflow-y-auto">
        <form className="p-6 space-y-6">
          {/* Campos específicos do template */}
          {template.type === 'prescription' && (
            <>
              {/* Medicamentos */}
              <div>
                <label className="block text-sm font-medium text-neutral-700 mb-2">
                  Medicamentos
                </label>
                <Controller
                  name="medications"
                  control={control}
                  render={({ field }) => (
                    <MedicationField
                      {...field}
                      onCheckInteractions={checkInteractions}
                      errors={errors.medications}
                    />
                  )}
                />
              </div>
              
              {/* Instruções */}
              <div>
                <label className="block text-sm font-medium text-neutral-700 mb-2">
                  Instruções Gerais
                </label>
                <Controller
                  name="instructions"
                  control={control}
                  render={({ field }) => (
                    <RichTextEditor
                      {...field}
                      ref={editorRef}
                      placeholder="Digite as instruções para o paciente..."
                      minHeight={150}
                    />
                  )}
                />
              </div>
              
              {/* Validade */}
              <div>
                <label className="block text-sm font-medium text-neutral-700 mb-2">
                  Validade (dias)
                </label>
                <Controller
                  name="valid_days"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="number"
                      min="1"
                      max="180"
                      className="w-32 px-3 py-2 border border-neutral-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                    />
                  )}
                />
              </div>
            </>
          )}
          
          {template.type === 'certificate' && (
            <>
              {/* CID-10 */}
              <div>
                <label className="block text-sm font-medium text-neutral-700 mb-2">
                  Diagnóstico (CID-10)
                </label>
                <Controller
                  name="diagnosis"
                  control={control}
                  render={({ field }) => (
                    <DiagnosisField
                      {...field}
                      onSuggest={suggestDiagnosis}
                    />
                  )}
                />
              </div>
              
              {/* Dias de afastamento */}
              <div>
                <label className="block text-sm font-medium text-neutral-700 mb-2">
                  Dias de Afastamento
                </label>
                <Controller
                  name="days_off"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="number"
                      min="1"
                      max="365"
                      className="w-32 px-3 py-2 border border-neutral-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                    />
                  )}
                />
              </div>
            </>
          )}
        </form>
      </div>
      
      {/* Validation Panel */}
      {showValidation && (
        <div className="border-t border-neutral-200 bg-neutral-50 p-4">
          <div className="space-y-3">
            <div className="flex items-center gap-3">
              <CheckCircle className="w-5 h-5 text-green-500" />
              <span className="text-sm">Campos obrigatórios preenchidos</span>
            </div>
            
            <div className="flex items-center gap-3">
              <CheckCircle className="w-5 h-5 text-green-500" />
              <span className="text-sm">Sem interações medicamentosas perigosas</span>
            </div>
            
            <div className="flex items-center gap-3">
              <AlertTriangle className="w-5 h-5 text-amber-500" />
              <span className="text-sm">Documento aguardando assinatura digital</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
6.2 PAINEL DE VALIDAÇÃO COM IA
tsx// CRIAR ARQUIVO: repomed-web/src/components/workspace/ValidationPanel.tsx

import { useState, useEffect } from 'react';
import {
  Shield, AlertTriangle, CheckCircle, XCircle,
  FileSignature, QrCode, ExternalLink, Info,
  ChevronDown, ChevronUp, Loader2
} from 'lucide-react';
import { Button } from '@/components/ui/Button';
import { useSignature } from '@/hooks/useSignature';
import { useCompliance } from '@/hooks/useCompliance';

export const ValidationPanel = ({ document, collapsed }) => {
  const [expanded, setExpanded] = useState({
    signature: true,
    compliance: true,
    interactions: false,
    risks: false
  });
  
  const { validateSignature, signDocument, isLoading: signatureLoading } = useSignature();
  const { checkCompliance, isLoading: complianceLoading } = useCompliance();
  
  const [validationResult, setValidationResult] = useState(null);
  const [complianceResult, setComplianceResult] = useState(null);
  
  useEffect(() => {
    if (document?.id) {
      // Validar assinatura se existir
      if (document.signed) {
        validateSignature(document.id).then(setValidationResult);
      }
      
      // Verificar compliance
      checkCompliance(document).then(setComplianceResult);
    }
  }, [document]);
  
  if (collapsed) {
    return (
      <div className="h-full flex items-center justify-center">
        <div className="transform -rotate-90 whitespace-nowrap text-sm font-medium text-neutral-500">
          Validação
        </div>
      </div>
    );
  }
  
  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="px-4 py-3 border-b border-neutral-200">
        <h3 className="font-medium flex items-center gap-2">
          <Shield className="w-4 h-4" />
          Validação e Compliance
        </h3>
      </div>
      
      {/* Content */}
      <div className="flex-1 overflow-y-auto">
        {/* Assinatura Digital */}
        <div className="border-b border-neutral-200">
          <button
            onClick={() => setExpanded({ ...expanded, signature: !expanded.signature })}
            className="w-full px-4 py-3 flex items-center justify-between hover:bg-neutral-50"
          >
            <div className="flex items-center gap-2">
              <FileSignature className="w-4 h-4 text-neutral-500" />
              <span className="text-sm font-medium">Assinatura Digital</span>
            </div>
            {expanded.signature ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
          </button>
          
          {expanded.signature && (
            <div className="px-4 pb-4">
              {document?.signed ? (
                <div className="space-y-3">
                  {validationResult ? (
                    <>
                      <div className="flex items-start gap-3">
                        {validationResult.valid ? (
                          <CheckCircle className="w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" />
                        ) : (
                          <XCircle className="w-5 h-5 text-red-500 flex-shrink-0 mt-0.5" />
                        )}
                        <div className="flex-1">
                          <p className="text-sm font-medium">
                            {validationResult.valid ? 'Assinatura Válida' : 'Assinatura Inválida'}
                          </p>
                          <p className="text-xs text-neutral-500 mt-1">
                            Assinado por: {validationResult.signer?.name}
                          </p>
                          <p className="text-xs text-neutral-500">
                            CRM: {validationResult.signer?.crm}
                          </p>
                          <p className="text-xs text-neutral-500">
                            Data: {new Date(validationResult.timestamp).toLocaleString('pt-BR')}
                          </p>
                        </div>
                      </div>
                      
                      {/* QR Code de Validação */}
                      {document.validation_qr && (
                        <div className="mt-3 p-3 bg-neutral-50 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <span className="text-xs font-medium text-neutral-600">QR Code de Validação</span>
                            <QrCode className="w-4 h-4 text-neutral-400" />
                          </div>
                          <img 
                            src={document.validation_qr} 
                            alt="QR Code" 
                            className="w-32 h-32 mx-auto"
                          />
                        </div>
                      )}
                      
                      {/* Verificar no ITI */}
                      <Button
                        variant="outline"
                        size="sm"
                        fullWidth
                        leftIcon={<ExternalLink />}
                        onClick={() => window.open('https://validar.iti.gov.br', '_blank')}
                      >
                        Verificar no ITI
                      </Button>
                    </>
                  ) : (
                    <div className="flex items-center gap-2">
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span className="text-sm text-neutral-500">Validando assinatura...</span>
                    </div>
                  )}
                </div>
              ) : (
                <div className="space-y-3">
                  <div className="flex items-start gap-3">
                    <AlertTriangle className="w-5 h-5 text-amber-500 flex-shrink-0 mt-0.5" />
                    <div className="flex-1">
                      <p className="text-sm font-medium">Documento não assinado</p>
                      <p className="text-xs text-neutral-500 mt-1">
                        Este documento precisa ser assinado digitalmente para ter validade legal.
                      </p>
                    </div>
                  </div>
                  
                  <Button
                    variant="primary"
                    size="sm"
                    fullWidth
                    leftIcon={signatureLoading ? <Loader2 className="animate-spin" /> : <FileSignature />}
                    onClick={() => signDocument(document.id)}
                    disabled={signatureLoading}
                  >
                    Assinar Documento
                  </Button>
                </div>
              )}
            </div>
          )}
        </div>
        
        {/* Compliance */}
        <div className="border-b border-neutral-200">
          <button
            onClick={() => setExpanded({ ...expanded, compliance: !expanded.compliance })}
            className="w-full px-4 py-3 flex items-center justify-between hover:bg-neutral-50"
          >
            <div className="flex items-center gap-2">
              <Shield className="w-4 h-4 text-neutral-500" />
              <span className="text-sm font-medium">Compliance Médico</span>
            </div>
            {expanded.compliance ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
          </button>
          
          {expanded.compliance && (
            <div className="px-4 pb-4">
              {complianceResult ? (
                <div className="space-y-2">
                  {/* CFM */}
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-neutral-600">CFM</span>
                    {complianceResult.cfm ? (
                      <div className="flex items-center gap-1">
                        <CheckCircle className="w-4 h-4 text-green-500" />
                        <span className="text-xs text-green-600">Conforme</span>
                      </div>
                    ) : (
                      <div className="flex items-center gap-1">
                        <XCircle className="w-4 h-4 text-red-500" />
                        <span className="text-xs text-red-600">Não conforme</span>
                      </div>
                    )}
                  </div>
                  
                  {/* ANVISA */}
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-neutral-600">ANVISA</span>
                    {complianceResult.anvisa ? (
                      <div className="flex items-center gap-1">
                        <CheckCircle className="w-4 h-4 text-green-500" />
                        <span className="text-xs text-green-600">Conforme</span>
                      </div>
                    ) : (
                      <div className="flex items-center gap-1">
                        <XCircle className="w-4 h-4 text-red-500" />
                        <span className="text-xs text-red-600">Não conforme</span>
                      </div>
                    )}
                  </div>
                  
                  {/* LGPD */}
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-neutral-600">LGPD</span>
                    {complianceResult.lgpd ? (
                      <div className="flex items-center gap-1">
                        <CheckCircle className="w-4 h-4 text-green-500" />
                        <span className="text-xs text-green-600">Conforme</span>
                      </div>
                    ) : (
                      <div className="flex items-center gap-1">
                        <XCircle className="w-4 h-4 text-red-500" />
                        <span className="text-xs text-red-600">Não conforme</span>
                      </div>
                    )}
                  </div>
                  
                  {/* Avisos */}
                  {complianceResult.warnings?.length > 0 && (
                    <div className="mt-3 p-2 bg-amber-50 rounded-lg">
                      <div className="flex items-start gap-2">
                        <Info className="w-4 h-4 text-amber-600 flex-shrink-0 mt-0.5" />
                        <div className="flex-1">
                          <p className="text-xs font-medium text-amber-900">Avisos:</p>
                          <ul className="mt-1 space-y-0.5">
                            {complianceResult.warnings.map((warning, idx) => (
                              <li key={idx} className="text-xs text-amber-700">• {warning}</li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <Loader2 className="w-4 h-4 animate-spin" />
                  <span className="text-sm text-neutral-500">Verificando compliance...</span>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

INSTRUÇÕES FINAIS DE IMPLEMENTAÇÃO
ORDEM DE EXECUÇÃO:

FASE 1 - Setup Inicial (Dia 1-3)

Criar estrutura de pastas conforme especificado
Instalar todas as dependências necessárias
Configurar design tokens e tema
Implementar componentes base UI


FASE 2 - Layout e Navegação (Dia 4-7)

Implementar MedicalWorkspace layout
Criar Command Palette
Configurar roteamento
Implementar navegação e menus


FASE 3 - Serviços Backend (Dia 8-14)

Configurar AIService com OpenAI
Implementar SignatureService ICP-Brasil
Criar FHIRService para RNDS
Setup banco de dados com migrations


FASE 4 - Integração Frontend-Backend (Dia 15-21)

Implementar hooks de IA
Criar fluxos de documento
Integrar assinatura digital
Testar validações


FASE 5 - Features Avançadas (Dia 22-30)

Offline-first com Service Worker
PWA configuration
Especialidades médicas
Dashboard analytics



VARIÁVEIS DE AMBIENTE NECESSÁRIAS:
env# Backend (.env)
DATABASE_URL=postgresql://user:pass@localhost:5432/repomed_ia
OPENAI_API_KEY=sk-...
RNDS_URL=https://ehr.saude.gov.br/api/fhir/r4
RNDS_CLIENT_ID=...
RNDS_CLIENT_SECRET=...
ITI_VALIDATOR_URL=https://validar.iti.gov.br/api/v1
JWT_SECRET=...
APP_URL=https://app.repomed.com.br

# Frontend (.env)
VITE_API_URL=http://localhost:8081
VITE_APP_NAME=RepoMed IA Enterprise
VITE_ENABLE_AI=true
VITE_ENABLE_OFFLINE=true
COMANDOS DE EXECUÇÃO:
bash# Backend
cd repomed-api
npm install
npm run migrate
npm run dev

# Frontend
cd repomed-web
npm install
npm run dev

# Build para produção
npm run build
CHECKLIST DE VALIDAÇÃO:

 Design System com todos os componentes funcionando
 Command Palette com atalhos de teclado
 IA sugerindo diagnósticos e medicamentos
 Assinatura ICP-Brasil validando no ITI
 FHIR export funcionando
 Offline mode sincronizando corretamente
 PWA instalável
 Performance metrics atingidas (LCP < 2s)
 Compliance checklist validado
 Testes com médicos reais realizados

Este código implementa um sistema médico completo de última geração com IA, assinatura digital ICP-Brasil, interoperabilidade FHIR/RNDS e UX de alto nível inspirada nos melhores aplicativos do mercado. A arquitetura é escalável, segura e preparada para atender desde médicos individuais até grandes redes hospitalares.