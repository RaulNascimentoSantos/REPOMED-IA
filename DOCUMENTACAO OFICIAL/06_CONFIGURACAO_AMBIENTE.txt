========================================
REPOMED IA - CONFIGURAÇÃO DE AMBIENTE
========================================

PRÉ-REQUISITOS DO SISTEMA:
=========================

SOFTWARE OBRIGATÓRIO:
┌─────────────────────────────────────────┐
│ Node.js                                 │
│ • Versão: 18.0.0 ou superior           │
│ • LTS recomendado: 18.19.0+            │
│ • Download: https://nodejs.org         │
│                                         │
│ NPM                                     │
│ • Versão: 9.0.0 ou superior            │
│ • Incluído com Node.js                 │
│ • Alternativa: Yarn 1.22.0+            │
│                                         │
│ PostgreSQL                              │
│ • Versão: 14.0 ou superior             │
│ • Recomendado: PostgreSQL 15.x         │
│ • Download: https://postgresql.org     │
│                                         │
│ Git                                     │
│ • Versão: 2.30.0 ou superior           │
│ • Para versionamento de código          │
│ • Download: https://git-scm.com        │
└─────────────────────────────────────────┘

SOFTWARE OPCIONAL (RECOMENDADO):
┌─────────────────────────────────────────┐
│ Visual Studio Code                      │
│ • IDE recomendada                       │
│ • Extensions: ES7+, Tailwind, Thunder   │
│                                         │
│ Postman ou Thunder Client               │
│ • Para testes de API                    │
│                                         │
│ DBeaver ou pgAdmin                      │
│ • Gerenciamento de banco de dados       │
└─────────────────────────────────────────┘

SISTEMA OPERACIONAL:
┌─────────────────────────────────────────┐
│ Windows                                 │
│ • Windows 10 1903+ / Windows 11        │
│ • PowerShell 5.1+ ou Command Prompt    │
│                                         │
│ macOS                                   │
│ • macOS 10.15 (Catalina) ou superior   │
│ • Terminal ou iTerm2                    │
│                                         │
│ Linux                                   │
│ • Ubuntu 20.04+ / Debian 11+           │
│ • CentOS 8+ / RHEL 8+                  │
│ • Bash shell                           │
└─────────────────────────────────────────┘

INSTALAÇÃO PASSO A PASSO:
=========================

1. PREPARAÇÃO DO AMBIENTE
-------------------------

# Verificar versões dos softwares
node --version          # >= 18.0.0
npm --version           # >= 9.0.0
psql --version          # >= 14.0
git --version           # >= 2.30.0

# Criar diretório do projeto
mkdir "RepoMed IA"
cd "RepoMed IA"

# Clonar ou baixar o projeto (se aplicável)
git clone <repository-url> .

2. CONFIGURAÇÃO DO BANCO DE DADOS
---------------------------------

# Conectar ao PostgreSQL como superusuário
psql -U postgres

-- Criar database
CREATE DATABASE repomed_ia;

-- Criar usuário específico para o projeto
CREATE USER repomed_user WITH PASSWORD 'senha_segura_aqui';

-- Conceder permissões
GRANT ALL PRIVILEGES ON DATABASE repomed_ia TO repomed_user;
GRANT ALL ON SCHEMA public TO repomed_user;

-- Conectar ao database criado
\c repomed_ia

-- Criar tabelas (Schema SQL será fornecido separadamente)

3. CONFIGURAÇÃO DO BACKEND
--------------------------

# Navegar para o diretório do backend
cd repomed-api

# Instalar dependências
npm install

# Criar arquivo de configuração
cp .env.example .env

# Configurar variáveis de ambiente (editar .env)
DATABASE_URL=postgresql://repomed_user:senha_segura_aqui@localhost:5432/repomed_ia
PORT=8081
NODE_ENV=development
LOG_LEVEL=info

# Executar migrações (quando disponível)
# npm run migrate

# Iniciar servidor de desenvolvimento
npm run dev

4. CONFIGURAÇÃO DO FRONTEND
---------------------------

# Abrir novo terminal e navegar para frontend
cd repomed-web

# Instalar dependências
npm install

# Criar arquivo de configuração
cp .env.example .env

# Configurar variáveis de ambiente (editar .env)
VITE_API_URL=http://localhost:8081
VITE_APP_NAME=RepoMed IA
VITE_NODE_ENV=development

# Iniciar servidor de desenvolvimento
npm run dev

VARIÁVEIS DE AMBIENTE:
=====================

BACKEND (.env na pasta repomed-api):
┌─────────────────────────────────────────┐
│ # Database                              │
│ DATABASE_URL=postgresql://user:pass@host:5432/db│
│ DB_HOST=localhost                       │
│ DB_PORT=5432                           │
│ DB_NAME=repomed_ia                     │
│ DB_USER=repomed_user                   │
│ DB_PASS=senha_segura_aqui              │
│                                         │
│ # Server                                │
│ PORT=8081                              │
│ NODE_ENV=development                    │
│ HOST=0.0.0.0                          │
│                                         │
│ # Security                              │
│ JWT_SECRET=chave_jwt_muito_segura       │
│ SESSION_SECRET=chave_sessao_segura      │
│ CORS_ORIGIN=http://localhost:3009      │
│                                         │
│ # Logging                               │
│ LOG_LEVEL=info                         │
│ LOG_FILE=./logs/app.log                │
│                                         │
│ # PDF Generation                        │
│ PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium│
│ PDF_TEMP_DIR=./temp/pdfs               │
│                                         │
│ # Email (Futuro)                        │
│ SMTP_HOST=smtp.gmail.com               │
│ SMTP_PORT=587                          │
│ SMTP_USER=email@exemplo.com            │
│ SMTP_PASS=senha_email                  │
│                                         │
│ # Storage (Futuro)                      │
│ STORAGE_PROVIDER=local                 │
│ STORAGE_PATH=./uploads                 │
│ MAX_FILE_SIZE=10MB                     │
└─────────────────────────────────────────┘

FRONTEND (.env na pasta repomed-web):
┌─────────────────────────────────────────┐
│ # API Configuration                     │
│ VITE_API_URL=http://localhost:8081      │
│ VITE_API_VERSION=v1                    │
│ VITE_API_TIMEOUT=10000                 │
│                                         │
│ # App Configuration                     │
│ VITE_APP_NAME=RepoMed IA               │
│ VITE_APP_VERSION=1.0.0                 │
│ VITE_NODE_ENV=development              │
│                                         │
│ # Feature Flags                         │
│ VITE_ENABLE_DEBUG=true                 │
│ VITE_ENABLE_ANALYTICS=false            │
│ VITE_ENABLE_AUTH=false                 │
│                                         │
│ # UI Configuration                      │
│ VITE_DEFAULT_THEME=light               │
│ VITE_ENABLE_DARK_MODE=true             │
│                                         │
│ # Development                           │
│ VITE_MOCK_API=false                    │
│ VITE_SHOW_DEVTOOLS=true                │
└─────────────────────────────────────────┘

COMANDOS ÚTEIS PARA DESENVOLVIMENTO:
===================================

BACKEND:
┌─────────────────────────────────────────┐
│ # Desenvolvimento com hot-reload        │
│ npm run dev                             │
│                                         │
│ # Produção                              │
│ npm start                               │
│                                         │
│ # Testes                                │
│ npm test                                │
│ npm run test:watch                      │
│                                         │
│ # Linting e formatação                  │
│ npm run lint                            │
│ npm run format                          │
│                                         │
│ # Database                              │
│ npm run db:migrate                      │
│ npm run db:seed                         │
│ npm run db:reset                        │
│                                         │
│ # Build                                 │
│ npm run build                           │
└─────────────────────────────────────────┘

FRONTEND:
┌─────────────────────────────────────────┐
│ # Desenvolvimento                       │
│ npm run dev                             │
│                                         │
│ # Build para produção                   │
│ npm run build                           │
│                                         │
│ # Preview do build                      │
│ npm run preview                         │
│                                         │
│ # Testes                                │
│ npm run test                            │
│ npm run test:ui                         │
│                                         │
│ # Linting                               │
│ npm run lint                            │
│ npm run lint:fix                        │
│                                         │
│ # Type checking                         │
│ npm run type-check                      │
│                                         │
│ # Análise do bundle                     │
│ npm run analyze                         │
└─────────────────────────────────────────┘

PORTAS PADRÃO:
==============

┌─────────────────────────────────────────┐
│ Frontend (Vite): 3009 (auto-detect)    │
│ Backend (Fastify): 8081                 │
│ Database (PostgreSQL): 5432            │
│ Testes (Vitest): 51204                  │
└─────────────────────────────────────────┘

ESTRUTURA DE LOGS:
==================

Backend Logs:
```
logs/
├── app.log              # Log geral da aplicação
├── error.log            # Apenas erros
├── access.log           # Logs de acesso HTTP
└── database.log         # Queries e operações DB
```

Níveis de log:
• error: Apenas erros críticos
• warn: Avisos importantes  
• info: Informações gerais (padrão)
• debug: Debug detalhado
• trace: Máximo detalhamento

TROUBLESHOOTING COMUM:
=====================

ERRO: "ECONNREFUSED" no frontend
┌─────────────────────────────────────────┐
│ CAUSA: Backend não está rodando         │
│ SOLUÇÃO:                                │
│ 1. Verificar se backend está em 8081    │
│ 2. Verificar arquivo .env do frontend   │
│ 3. npm run dev no backend              │
└─────────────────────────────────────────┘

ERRO: "Database connection failed"
┌─────────────────────────────────────────┐
│ CAUSA: PostgreSQL não conecta           │
│ SOLUÇÃO:                                │
│ 1. Verificar se PostgreSQL está rodando │
│ 2. Conferir credenciais no .env         │
│ 3. Testar conexão: psql -U user -d db   │
│ 4. Verificar permissões do usuário      │
└─────────────────────────────────────────┘

ERRO: "Permission denied" em PDF
┌─────────────────────────────────────────┐
│ CAUSA: Puppeteer sem permissões         │
│ SOLUÇÃO:                                │
│ 1. Instalar Chromium/Chrome             │
│ 2. Configurar PUPPETEER_EXECUTABLE_PATH │
│ 3. chmod +x no executável (Linux/Mac)   │
└─────────────────────────────────────────┘

ERRO: "Port already in use"
┌─────────────────────────────────────────┐
│ CAUSA: Porta ocupada por outro processo │
│ SOLUÇÃO:                                │
│ # Windows                               │
│ netstat -ano | findstr :8081            │
│ taskkill /PID <PID> /F                  │
│                                         │
│ # Linux/Mac                             │
│ lsof -ti:8081 | xargs kill -9          │
│                                         │
│ # Ou mudar porta no .env                │
└─────────────────────────────────────────┘

DESENVOLVIMENTO EM EQUIPE:
=========================

Git Workflow:
```bash
# Sempre atualizar antes de começar
git pull origin main

# Criar branch para feature/fix
git checkout -b feature/nova-funcionalidade

# Fazer commits pequenos e descritivos
git add .
git commit -m "feat: adiciona validação de CPF"

# Push para o repositório
git push origin feature/nova-funcionalidade

# Criar Pull Request no GitHub/GitLab
```

Convenções de commit:
• feat: nova funcionalidade
• fix: correção de bug
• docs: documentação
• style: formatação
• refactor: refatoração
• test: testes
• chore: tarefas de build/deploy

PERFORMANCE E MONITORAMENTO:
===========================

Métricas importantes:
┌─────────────────────────────────────────┐
│ • Tempo de inicialização                │
│ • Latência P95 da API                   │
│ • Uso de CPU e memória                  │
│ • Conexões ativas no banco              │
│ • Tamanho do bundle frontend            │
│ • Core Web Vitals                       │
└─────────────────────────────────────────┘

Ferramentas de debug:
• Node.js Inspector (Backend)
• React DevTools (Frontend)
• Browser DevTools
• Postman/Thunder Client (API)
• pgAdmin (Database)