version: '3.9'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # ============= CORE SERVICES (sempre rodando) =============
  postgres:
    image: postgres:15-alpine
    container_name: repomed-postgres
    restart: unless-stopped
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:?Database password required}
      POSTGRES_DB: ${DATABASE_NAME:-repomed_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *default-logging
    networks:
      - repomed-network

  redis:
    image: redis:7-alpine
    container_name: repomed-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfilename "appendonly.aof"
      --appendfsync everysec
      ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging
    networks:
      - repomed-network

  # ============= MONITORING (profile: monitoring) =============
  prometheus:
    image: prom/prometheus:latest
    container_name: repomed-prometheus
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    logging: *default-logging
    networks:
      - repomed-network

  grafana:
    image: grafana/grafana:latest
    container_name: repomed-grafana
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:?Grafana password required}
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    logging: *default-logging
    networks:
      - repomed-network

  # ============= STORAGE (profile: storage) =============
  minio:
    image: minio/minio:latest
    container_name: repomed-minio
    restart: unless-stopped
    profiles: ["storage", "full"]
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:?MinIO password required}
      MINIO_DEFAULT_BUCKETS: ${MINIO_BUCKET:-repomed-files}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    logging: *default-logging
    networks:
      - repomed-network

  # ============= DEVELOPMENT TOOLS (profile: dev) =============
  mailhog:
    image: mailhog/mailhog:latest
    container_name: repomed-mailhog
    restart: unless-stopped
    profiles: ["dev"]
    ports:
      - "1025:1025"
      - "8025:8025"
    logging: *default-logging
    networks:
      - repomed-network

  adminer:
    image: adminer:latest
    container_name: repomed-adminer
    restart: unless-stopped
    profiles: ["dev"]
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    logging: *default-logging
    networks:
      - repomed-network


networks:
  repomed-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local