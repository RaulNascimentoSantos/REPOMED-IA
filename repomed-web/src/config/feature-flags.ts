/**
 * RepoMed IA v5.1 - Feature Flags Configuration
 *
 * Sistema de feature flags para rollout seguro de melhorias UX m√©dicas.
 * Todas as flags come√ßam desabilitadas (false) para seguran√ßa.
 */

export interface FeatureFlags {
  // üîç Flags de Auditoria e Valida√ß√£o
  FF_THEME_AUDIT: boolean;           // Habilita auditoria autom√°tica de temas
  FF_CONTRAST_VALIDATION: boolean;   // Valida√ß√£o de contraste em tempo real
  FF_PERFORMANCE_MONITOR: boolean;   // Monitor de performance m√©dica

  // üé® Flags de Tema e Design v6.0
  FF_THEME_AWARE: boolean;          // Componentes theme-aware (CSS variables)
  FF_CLINICAL_THEME: boolean;       // Novo tema Clinical otimizado para medicina
  FF_SEMANTIC_TOKENS: boolean;      // Sistema de tokens sem√¢nticos

  // üè† Flags de UX e Interface
  FF_HOME_PROGRESSIVE: boolean;     // Progressive disclosure na home
  FF_HOME_ENTERPRISE: boolean;      // Home Enterprise 2025 - Ultra-safe wrapper
  FF_HOME_PRO_V9: boolean;          // Home PRO V9 - Re-arquitetura Visual & UX
  FF_MEDICAL_SHORTCUTS: boolean;    // Atalhos m√©dicos otimizados
  FF_REDUCED_MOTION: boolean;       // Modo motion-reduced para acessibilidade

  // ü§ñ Flags de IA e UX Preditivo v6.0
  FF_AI_SUGGESTIONS: boolean;       // Sugest√µes inteligentes de IA m√©dica
  FF_SMART_AUTOFILL: boolean;       // Autofill inteligente baseado em contexto
  FF_PREDICTIVE_SEARCH: boolean;    // Busca preditiva para medicamentos
  FF_INTELLIGENT_FORMS: boolean;    // Formul√°rios que se adaptam ao contexto

  // üè• Flags de Componentes M√©dicos v6.0
  FF_MEDICAL_NOTIFICATIONS: boolean; // Centro de notifica√ß√µes m√©dicas avan√ßado
  FF_AUTO_SAVE_SYSTEM: boolean;     // Sistema de auto-save inteligente
  FF_MEDICAL_VALIDATION: boolean;   // Valida√ß√£o m√©dica em tempo real
  FF_FORM_WRAPPER: boolean;         // Wrapper avan√ßado para formul√°rios m√©dicos

  // üß™ Flags de QA e Testing
  FF_CROSS_THEME_TESTS: boolean;    // Testes autom√°ticos cross-theme
  FF_A11Y_ENHANCED: boolean;        // Melhorias de acessibilidade m√©dica
  FF_DEBUG_MODE: boolean;           // Modo debug para desenvolvimento
}

/**
 * Configura√ß√£o padr√£o das feature flags
 * IMPORTANTE: Todas come√ßam desabilitadas para rollout seguro
 */
const DEFAULT_FLAGS: FeatureFlags = {
  // Auditoria e Valida√ß√£o
  FF_THEME_AUDIT: false,
  FF_CONTRAST_VALIDATION: false,
  FF_PERFORMANCE_MONITOR: false,

  // Tema e Design v6.0
  FF_THEME_AWARE: false,
  FF_CLINICAL_THEME: false,
  FF_SEMANTIC_TOKENS: false,

  // UX e Interface
  FF_HOME_PROGRESSIVE: false,
  FF_HOME_ENTERPRISE: false,
  FF_HOME_PRO_V9: false,
  FF_MEDICAL_SHORTCUTS: false,
  FF_REDUCED_MOTION: false,

  // IA e UX Preditivo v6.0
  FF_AI_SUGGESTIONS: false,
  FF_SMART_AUTOFILL: false,
  FF_PREDICTIVE_SEARCH: false,
  FF_INTELLIGENT_FORMS: false,

  // Componentes M√©dicos v6.0
  FF_MEDICAL_NOTIFICATIONS: false,
  FF_AUTO_SAVE_SYSTEM: false,
  FF_MEDICAL_VALIDATION: false,
  FF_FORM_WRAPPER: false,

  // QA e Testing
  FF_CROSS_THEME_TESTS: false,
  FF_A11Y_ENHANCED: false,
  FF_DEBUG_MODE: false,
};

/**
 * Obt√©m as feature flags do localStorage ou environment
 * Prioridade: localStorage > environment > defaults
 */
export function getFeatureFlags(): FeatureFlags {
  // Base flags: DEFAULT + DEVELOPMENT (em desenvolvimento)
  const isDevelopment = process.env.NODE_ENV === 'development';
  const baseFlags = isDevelopment
    ? { ...DEFAULT_FLAGS, ...DEVELOPMENT_FLAGS }
    : DEFAULT_FLAGS;

  // Em ambiente de desenvolvimento, verificar localStorage
  if (typeof window !== 'undefined') {
    try {
      const stored = localStorage.getItem('repomed-feature-flags');
      if (stored) {
        const parsed = JSON.parse(stored);
        return { ...baseFlags, ...parsed };
      }
    } catch (error) {
      console.warn('Feature flags: erro ao ler localStorage', error);
    }
  }

  // Verificar vari√°veis de ambiente (para build/CI)
  if (typeof process !== 'undefined' && process.env) {
    const envFlags: Partial<FeatureFlags> = {};

    Object.keys(DEFAULT_FLAGS).forEach(key => {
      const envKey = `NEXT_PUBLIC_${key}`;
      if (process.env[envKey]) {
        envFlags[key as keyof FeatureFlags] = process.env[envKey] === 'true';
      }
    });

    return { ...baseFlags, ...envFlags };
  }

  return baseFlags;
}

/**
 * Salva feature flags no localStorage
 */
export function setFeatureFlags(flags: Partial<FeatureFlags>): void {
  if (typeof window !== 'undefined') {
    try {
      const current = getFeatureFlags();
      const updated = { ...current, ...flags };
      localStorage.setItem('repomed-feature-flags', JSON.stringify(updated));

      // Recarregar p√°gina para aplicar mudan√ßas
      if (Object.keys(flags).length > 0) {
        console.log('Feature flags atualizadas, recarregando p√°gina...');
        window.location.reload();
      }
    } catch (error) {
      console.error('Feature flags: erro ao salvar', error);
    }
  }
}

/**
 * Hook para usar feature flags em componentes React
 */
export function useFeatureFlag(flag: keyof FeatureFlags): boolean {
  const flags = getFeatureFlags();
  return flags[flag];
}

/**
 * Utilit√°rio para verificar se uma flag est√° habilitada
 */
export function isFeatureEnabled(flag: keyof FeatureFlags): boolean {
  const flags = getFeatureFlags();
  return flags[flag];
}

/**
 * Reset completo das feature flags
 */
export function resetFeatureFlags(): void {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('repomed-feature-flags');
    console.log('Feature flags resetadas para padr√£o');
    window.location.reload();
  }
}

/**
 * Configura√ß√µes para desenvolvimento/debug
 */
export const DEVELOPMENT_FLAGS: Partial<FeatureFlags> = {
  FF_DEBUG_MODE: false,  // DESABILITADO - n√£o deve aparecer em produ√ß√£o
  FF_THEME_AUDIT: true,

  // ‚úÖ v6.0 ATIVO - Tema Clinical otimizado
  FF_CLINICAL_THEME: true,
  FF_THEME_AWARE: true,
  FF_SEMANTIC_TOKENS: true,

  // ‚ùå PERMANENTEMENTE DESATIVADO - auto-click bug
  FF_HOME_PROGRESSIVE: false,

  // ‚úÖ v6.0 ATIVO - Home Enterprise Ultra-Safe (rollback test successful)
  FF_HOME_ENTERPRISE: true,

  // üöß v9.0 DESENVOLVIMENTO - Home PRO Re-arquitetura Visual
  FF_HOME_PRO_V9: true,

  // ‚úÖ v6.0 ATIVO - IA e UX Preditivo
  FF_AI_SUGGESTIONS: true,
  FF_SMART_AUTOFILL: true,
  FF_PREDICTIVE_SEARCH: true,
  FF_INTELLIGENT_FORMS: true,

  // ‚úÖ v6.0 ATIVO - Componentes M√©dicos Avan√ßados
  FF_MEDICAL_NOTIFICATIONS: true,
  FF_AUTO_SAVE_SYSTEM: true,
  FF_MEDICAL_VALIDATION: true,
  FF_FORM_WRAPPER: true,

  // ‚úÖ Acessibilidade e QA
  FF_A11Y_ENHANCED: true,
  FF_MEDICAL_SHORTCUTS: true,
};

/**
 * Configura√ß√µes para staging/homologa√ß√£o
 */
export const STAGING_FLAGS: Partial<FeatureFlags> = {
  FF_THEME_AUDIT: true,
  FF_CONTRAST_VALIDATION: true,
  FF_CROSS_THEME_TESTS: true,
};

/**
 * Configura√ß√µes para produ√ß√£o (apenas funcionalidades est√°veis)
 */
export const PRODUCTION_FLAGS: Partial<FeatureFlags> = {
  // ‚úÖ v6.0 PRODU√á√ÉO - Features testadas e est√°veis
  FF_CLINICAL_THEME: true,          // Tema Clinical aprovado para produ√ß√£o
  FF_THEME_AWARE: true,             // Sistema de temas est√°vel
  FF_SEMANTIC_TOKENS: true,         // Tokens sem√¢nticos consolidados

  // ‚úÖ Componentes m√©dicos est√°veis
  FF_MEDICAL_NOTIFICATIONS: true,   // Notifica√ß√µes m√©dicas aprovadas
  FF_AI_SUGGESTIONS: true,          // IA m√©dica est√°vel
  FF_A11Y_ENHANCED: true,          // Acessibilidade validada

  // üöß Features em rollout gradual
  FF_AUTO_SAVE_SYSTEM: false,      // Auto-save: aguardando aprova√ß√£o final
  FF_MEDICAL_VALIDATION: false,    // Valida√ß√£o: testes em andamento
  FF_FORM_WRAPPER: false,          // Forms: QA pendente

  // ‚ùå Features ainda em desenvolvimento
  FF_SMART_AUTOFILL: false,        // Aguardando integra√ß√£o com API
  FF_PREDICTIVE_SEARCH: false,     // Performance sendo otimizada
  FF_INTELLIGENT_FORMS: false,     // UX sendo refinada
};