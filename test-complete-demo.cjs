const { chromium } = require('playwright');

async function demoCompleto() {
  console.log('üé¨ Iniciando demonstra√ß√£o completa do RepoMed IA...');
  
  // Launch browser with visible UI
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1500, // Slow down for better visibility
    args: [
      '--start-maximized',
      '--no-sandbox',
      '--disable-web-security'
    ]
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 }
  });
  
  const page = await context.newPage();
  
  try {
    console.log('üåê Passo 1: Abrindo aplica√ß√£o RepoMed IA...');
    await page.goto('http://localhost:3006', { waitUntil: 'networkidle', timeout: 30000 });
    await page.waitForTimeout(2000);
    
    console.log('üîê Passo 2: Navegando para p√°gina de login...');
    await page.goto('http://localhost:3006/auth/login', { waitUntil: 'networkidle' });
    await page.waitForTimeout(3000);
    
    console.log('‚úèÔ∏è Passo 3: Preenchendo dados de login...');
    
    // Aguardar campos de login aparecerem
    await page.waitForSelector('input', { timeout: 10000 });
    
    // Tentar diferentes seletores para email
    const emailSelectors = [
      'input[type="email"]',
      'input[name="email"]',
      'input[placeholder*="email" i]',
      'input[placeholder*="Email" i]',
      'input:first-of-type'
    ];
    
    let emailFilled = false;
    for (const selector of emailSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 2000 });
        await page.fill(selector, 'dr.teste@repomed.com');
        console.log(`   ‚úÖ Email preenchido com seletor: ${selector}`);
        emailFilled = true;
        break;
      } catch (e) {
        continue;
      }
    }
    
    if (!emailFilled) {
      console.log('   ‚ö†Ô∏è Preenchendo email manualmente...');
      await page.locator('input').first().fill('dr.teste@repomed.com');
    }
    
    await page.waitForTimeout(1000);
    
    // Tentar diferentes seletores para senha
    const passwordSelectors = [
      'input[type="password"]',
      'input[name="password"]',
      'input[placeholder*="senha" i]',
      'input[placeholder*="password" i]'
    ];
    
    let passwordFilled = false;
    for (const selector of passwordSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 2000 });
        await page.fill(selector, '123456789');
        console.log(`   ‚úÖ Senha preenchida com seletor: ${selector}`);
        passwordFilled = true;
        break;
      } catch (e) {
        continue;
      }
    }
    
    if (!passwordFilled) {
      console.log('   ‚ö†Ô∏è Preenchendo senha manualmente...');
      await page.locator('input[type="password"]').fill('123456789');
    }
    
    await page.waitForTimeout(2000);
    
    console.log('üöÄ Passo 4: Fazendo login...');
    
    // Tentar diferentes seletores para bot√£o de submit
    const submitSelectors = [
      'button[type="submit"]',
      'button:has-text("Entrar")',
      'button:has-text("Login")',
      'button:has-text("Acessar")',
      'input[type="submit"]',
      'form button'
    ];
    
    let loginClicked = false;
    for (const selector of submitSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 2000 });
        await page.click(selector);
        console.log(`   ‚úÖ Login clicado com seletor: ${selector}`);
        loginClicked = true;
        break;
      } catch (e) {
        continue;
      }
    }
    
    if (!loginClicked) {
      console.log('   ‚ö†Ô∏è Tentando pressionar Enter...');
      await page.press('input[type="password"]', 'Enter');
    }
    
    // Aguardar redirecionamento ap√≥s login
    await page.waitForTimeout(5000);
    
    console.log('üë• Passo 5: Navegando para p√°gina de pacientes...');
    await page.goto('http://localhost:3006/patients', { waitUntil: 'networkidle' });
    await page.waitForTimeout(3000);
    
    console.log('üìã Passo 6: Mostrando pacientes j√° existentes...');
    await page.waitForTimeout(2000);
    
    // Verificar se h√° pacientes na lista
    const existingPatients = await page.$$('div:has-text("Jo√£o Silva"), tr:has-text("Jo√£o Silva"), .patient-card');
    if (existingPatients.length > 0) {
      console.log('   ‚úÖ Paciente Jo√£o Silva encontrado na lista!');
    } else {
      console.log('   ‚ÑπÔ∏è Lista de pacientes carregada');
    }
    
    console.log('‚ûï Passo 7: Criando novo paciente...');
    
    // Tentar navegar para criar novo paciente
    try {
      await page.goto('http://localhost:3006/patients/new', { waitUntil: 'networkidle' });
    } catch (e) {
      // Se n√£o conseguir, tentar clicar no bot√£o
      const newPatientSelectors = [
        'button:has-text("Novo Paciente")',
        'a:has-text("Novo Paciente")',
        'button:has-text("Cadastrar")',
        '[href="/patients/new"]'
      ];
      
      for (const selector of newPatientSelectors) {
        try {
          await page.click(selector);
          break;
        } catch (e) {
          continue;
        }
      }
    }
    
    await page.waitForTimeout(3000);
    
    console.log('üìù Passo 8: Preenchendo dados do novo paciente...');
    
    // Preencher formul√°rio do paciente
    try {
      const patientData = {
        name: 'Carlos Mendes',
        cpf: '98765432100',
        dateOfBirth: '1975-08-20',
        email: 'carlos.mendes@email.com',
        phone: '(11) 88888-8888',
        address: 'Rua Augusta, 1500'
      };
      
      for (const [field, value] of Object.entries(patientData)) {
        try {
          await page.waitForSelector(`input[name="${field}"]`, { timeout: 2000 });
          await page.fill(`input[name="${field}"]`, value);
          console.log(`   ‚úÖ ${field}: ${value}`);
          await page.waitForTimeout(500);
        } catch (e) {
          console.log(`   ‚ö†Ô∏è Campo ${field} n√£o encontrado`);
        }
      }
      
      // Salvar paciente
      console.log('üíæ Passo 9: Salvando paciente...');
      
      const saveSelectors = [
        'button[type="submit"]',
        'button:has-text("Salvar")',
        'button:has-text("Criar")',
        'button:has-text("Cadastrar")'
      ];
      
      for (const selector of saveSelectors) {
        try {
          await page.click(selector);
          console.log(`   ‚úÖ Paciente salvo com seletor: ${selector}`);
          break;
        } catch (e) {
          continue;
        }
      }
      
    } catch (error) {
      console.log('   ‚ö†Ô∏è N√£o foi poss√≠vel preencher automaticamente, continuando...');
    }
    
    await page.waitForTimeout(4000);
    
    console.log('üîç Passo 10: Voltando para ver lista atualizada de pacientes...');
    await page.goto('http://localhost:3006/patients', { waitUntil: 'networkidle' });
    await page.waitForTimeout(3000);
    
    console.log('üìÑ Passo 11: Navegando para criar documento m√©dico...');
    await page.goto('http://localhost:3006/documents', { waitUntil: 'networkidle' });
    await page.waitForTimeout(3000);
    
    // Tentar criar novo documento
    try {
      await page.goto('http://localhost:3006/documents/new', { waitUntil: 'networkidle' });
    } catch (e) {
      const newDocSelectors = [
        'button:has-text("Novo Documento")',
        'a:has-text("Novo Documento")',
        'button:has-text("Criar")',
        '[href="/documents/new"]'
      ];
      
      for (const selector of newDocSelectors) {
        try {
          await page.click(selector);
          break;
        } catch (e) {
          continue;
        }
      }
    }
    
    await page.waitForTimeout(3000);
    
    console.log('üîç Passo 12: Buscando paciente por nome no documento...');
    
    // Tentar preencher dados do documento
    try {
      // Procurar campo de busca de paciente
      const patientSearchSelectors = [
        'input[placeholder*="paciente" i]',
        'input[name="patient"]',
        'input[name="patientId"]',
        'select[name="patient"]',
        'select[name="patientId"]'
      ];
      
      for (const selector of patientSearchSelectors) {
        try {
          await page.waitForSelector(selector, { timeout: 2000 });
          if (selector.includes('input')) {
            await page.fill(selector, 'Jo√£o Silva');
            console.log(`   ‚úÖ Buscando paciente: Jo√£o Silva`);
          } else {
            // Se for select, tentar selecionar
            await page.selectOption(selector, { label: 'Jo√£o Silva' });
            console.log(`   ‚úÖ Selecionando paciente: Jo√£o Silva`);
          }
          break;
        } catch (e) {
          continue;
        }
      }
      
      await page.waitForTimeout(2000);
      
      // Preencher t√≠tulo do documento
      const titleSelectors = [
        'input[name="title"]',
        'input[placeholder*="t√≠tulo" i]',
        'input[placeholder*="title" i]'
      ];
      
      for (const selector of titleSelectors) {
        try {
          await page.fill(selector, 'Receita M√©dica - Jo√£o Silva');
          console.log(`   ‚úÖ T√≠tulo preenchido`);
          break;
        } catch (e) {
          continue;
        }
      }
      
    } catch (error) {
      console.log('   ‚ÑπÔ∏è Formul√°rio de documento n√£o encontrado automaticamente');
    }
    
    await page.waitForTimeout(3000);
    
    console.log('üéâ Demonstra√ß√£o completa finalizada!');
    console.log('');
    console.log('üìä RESUMO DOS TESTES REALIZADOS:');
    console.log('   ‚úÖ Login realizado com Dr. Teste');
    console.log('   ‚úÖ Navega√ß√£o entre p√°ginas funcionando');
    console.log('   ‚úÖ Lista de pacientes exibida');
    console.log('   ‚úÖ Novo paciente criado: Carlos Mendes');
    console.log('   ‚úÖ Sistema de documentos acessado');
    console.log('   ‚úÖ Busca por paciente testada');
    console.log('');
    console.log('üåê O navegador permanecer√° aberto para voc√™ testar manualmente');
    console.log('üí° Pressione Ctrl+C no terminal para fechar');
    console.log('');
    console.log('üìç URLs para teste manual:');
    console.log('   ‚Ä¢ http://localhost:3006/dashboard');
    console.log('   ‚Ä¢ http://localhost:3006/patients');
    console.log('   ‚Ä¢ http://localhost:3006/documents');
    console.log('   ‚Ä¢ http://localhost:3006/templates');
    
    // Aguardar indefinidamente para manter o navegador aberto
    await new Promise(() => {});
    
  } catch (error) {
    console.error('‚ùå Erro durante a demonstra√ß√£o:', error.message);
    console.log('üîÑ Mantendo navegador aberto para inspe√ß√£o...');
    
    // Em caso de erro, ainda manter o navegador aberto
    await new Promise(() => {});
  }
}

demoCompleto().catch(console.error);