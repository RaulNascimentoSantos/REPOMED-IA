import { chromium } from 'playwright';

(async () => {
  const browser = await chromium.launch({ headless: false });
  const page = await browser.newPage();
  
  console.log('üîç Teste abrangente do frontend RepoMed IA...\n');
  
  // Capturar erros
  const errors = [];
  page.on('pageerror', error => {
    errors.push(`‚ùå JS Error: ${error.message}`);
    console.log(`‚ùå JS Error: ${error.message}`);
  });
  
  page.on('console', msg => {
    if (msg.type() === 'error') {
      console.log(`‚ùå Console Error: ${msg.text()}`);
    }
  });

  try {
    console.log('üìç 1. Testando p√°gina inicial...');
    await page.goto('http://localhost:3013', { waitUntil: 'networkidle' });
    await page.waitForTimeout(4000); // Aguardar 4s para ver se h√° erros
    
    const title = await page.title();
    console.log(`üìÑ T√≠tulo: ${title}`);
    
    // Verificar se React est√° funcionando
    const reactRoot = await page.locator('#root').count();
    console.log(`‚öõÔ∏è  React root detectado: ${reactRoot > 0 ? 'SIM' : 'N√ÉO'}`);
    
    // Verificar elementos da p√°gina
    const navLinks = await page.locator('nav a, [role="navigation"] a').count();
    console.log(`üîó Links de navega√ß√£o: ${navLinks}`);
    
    const buttons = await page.locator('button').count();
    console.log(`üîò Bot√µes detectados: ${buttons}`);
    
    const forms = await page.locator('form').count();
    console.log(`üìù Formul√°rios detectados: ${forms}`);
    
    console.log('\nüìç 2. Testando navega√ß√£o entre p√°ginas...');
    
    // Tentar clicar em links de navega√ß√£o
    const navigationLinks = await page.locator('nav a, [role="navigation"] a').all();
    
    if (navigationLinks.length > 0) {
      for (let i = 0; i < Math.min(navigationLinks.length, 3); i++) {
        try {
          const linkText = await navigationLinks[i].textContent();
          console.log(`üîó Testando link: "${linkText}"`);
          
          await navigationLinks[i].click();
          await page.waitForTimeout(2000);
          
          const currentUrl = page.url();
          console.log(`üìç URL atual: ${currentUrl}`);
          
        } catch (linkError) {
          console.log(`‚ö†Ô∏è  Erro ao clicar no link: ${linkError.message}`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è  Nenhum link de navega√ß√£o encontrado');
    }
    
    console.log('\nüìç 3. Testando intera√ß√µes com bot√µes...');
    
    // Voltar para p√°gina inicial
    await page.goto('http://localhost:3013');
    await page.waitForTimeout(2000);
    
    const allButtons = await page.locator('button:visible').all();
    
    if (allButtons.length > 0) {
      for (let i = 0; i < Math.min(allButtons.length, 3); i++) {
        try {
          const buttonText = await allButtons[i].textContent();
          console.log(`üîò Testando bot√£o: "${buttonText}"`);
          
          await allButtons[i].click();
          await page.waitForTimeout(1000);
          
        } catch (buttonError) {
          console.log(`‚ö†Ô∏è  Erro ao clicar no bot√£o: ${buttonError.message}`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è  Nenhum bot√£o vis√≠vel encontrado');
    }
    
    console.log('\nüìç 4. Verificando responsividade...');
    
    // Testar diferentes tamanhos de tela
    await page.setViewportSize({ width: 375, height: 667 }); // Mobile
    await page.waitForTimeout(1000);
    console.log('üì± Mobile (375x667): OK');
    
    await page.setViewportSize({ width: 768, height: 1024 }); // Tablet  
    await page.waitForTimeout(1000);
    console.log('üìã Tablet (768x1024): OK');
    
    await page.setViewportSize({ width: 1920, height: 1080 }); // Desktop
    await page.waitForTimeout(1000);
    console.log('üñ•Ô∏è  Desktop (1920x1080): OK');
    
    console.log('\nüìç 5. Relat√≥rio final...');
    
    if (errors.length === 0) {
      console.log('‚úÖ SUCESSO: Nenhum erro detectado!');
      console.log('‚úÖ Frontend est√° funcionando corretamente');
    } else {
      console.log(`‚ùå ERROS ENCONTRADOS: ${errors.length}`);
      errors.forEach(error => console.log(error));
    }
    
  } catch (error) {
    console.error(`‚ùå Erro cr√≠tico: ${error.message}`);
  }
  
  await page.waitForTimeout(3000); // Manter aberto para visualiza√ß√£o
  await browser.close();
})();